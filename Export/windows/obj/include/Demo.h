// Generated by Haxe 3.4.3
#ifndef INCLUDED_Demo
#define INCLUDED_Demo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(Demo)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,animation,IAnimatable)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,MovieClip)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,display,Sprite)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,textures,Texture)



class HXCPP_CLASS_ATTRIBUTES Demo_obj : public  ::starling::display::Sprite_obj
{
	public:
		typedef  ::starling::display::Sprite_obj super;
		typedef Demo_obj OBJ_;
		Demo_obj();

	public:
		enum { _hx_ClassId = 0x2d3f8543 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Demo")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Demo"); }
		static hx::ObjectPtr< Demo_obj > __new();
		static hx::ObjectPtr< Demo_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Demo_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Demo","\x43","\x85","\x3f","\x2d"); }

		static hx::Class CharacterTexture;
		static hx::Class CharacterNormalTexture;
		static hx::Class CharacterXml;
		 ::starling::display::Sprite _characters;
		Float _stageWidth;
		Float _stageHeight;
		void addMarchingCharacters(int count, ::openfl::_Vector::AbstractVector textures, ::openfl::_Vector::AbstractVector normalTextures);
		::Dynamic addMarchingCharacters_dyn();

		void addStaticCharacter( ::starling::textures::Texture texture, ::starling::textures::Texture normalTexture);
		::Dynamic addStaticCharacter_dyn();

		 ::starling::display::MovieClip createCharacter( ::openfl::_Vector::AbstractVector textures, ::openfl::_Vector::AbstractVector normalTextures,hx::Null< int >  fps);
		::Dynamic createCharacter_dyn();

};


#endif /* INCLUDED_Demo */ 
