// Generated by Haxe 3.4.3
#ifndef INCLUDED_starling_display_MovieClip
#define INCLUDED_starling_display_MovieClip

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS2(openfl,media,SoundTransform)
HX_DECLARE_CLASS2(starling,animation,IAnimatable)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,MovieClip)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES MovieClip_obj : public  ::starling::display::Image_obj
{
	public:
		typedef  ::starling::display::Image_obj super;
		typedef MovieClip_obj OBJ_;
		MovieClip_obj();

	public:
		enum { _hx_ClassId = 0x4eb0110e };

		void __construct( ::openfl::_Vector::AbstractVector textures,hx::Null< Float >  __o_fps);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.MovieClip")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.MovieClip"); }
		static hx::ObjectPtr< MovieClip_obj > __new( ::openfl::_Vector::AbstractVector textures,hx::Null< Float >  __o_fps);
		static hx::ObjectPtr< MovieClip_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::_Vector::AbstractVector textures,hx::Null< Float >  __o_fps);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MovieClip_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("MovieClip","\x80","\xe2","\xed","\xb9"); }

		 ::openfl::_Vector::AbstractVector _hx___frames;
		Float _hx___defaultFrameDuration;
		Float _hx___currentTime;
		int _hx___currentFrameID;
		bool _hx___loop;
		bool _hx___playing;
		bool _hx___muted;
		bool _hx___wasStopped;
		 ::openfl::media::SoundTransform _hx___soundTransform;
		void init( ::openfl::_Vector::AbstractVector textures,Float fps);
		::Dynamic init_dyn();

		void addFrame( ::starling::textures::Texture texture, ::openfl::media::Sound sound,hx::Null< Float >  duration);
		::Dynamic addFrame_dyn();

		void addFrameAt(int frameID, ::starling::textures::Texture texture, ::openfl::media::Sound sound,hx::Null< Float >  duration);
		::Dynamic addFrameAt_dyn();

		void removeFrameAt(int frameID);
		::Dynamic removeFrameAt_dyn();

		 ::starling::textures::Texture getFrameTexture(int frameID);
		::Dynamic getFrameTexture_dyn();

		void setFrameTexture(int frameID, ::starling::textures::Texture texture);
		::Dynamic setFrameTexture_dyn();

		 ::openfl::media::Sound getFrameSound(int frameID);
		::Dynamic getFrameSound_dyn();

		void setFrameSound(int frameID, ::openfl::media::Sound sound);
		::Dynamic setFrameSound_dyn();

		 ::Dynamic getFrameAction(int frameID);
		::Dynamic getFrameAction_dyn();

		void setFrameAction(int frameID, ::Dynamic action);
		::Dynamic setFrameAction_dyn();

		Float getFrameDuration(int frameID);
		::Dynamic getFrameDuration_dyn();

		void setFrameDuration(int frameID,Float duration);
		::Dynamic setFrameDuration_dyn();

		void reverseFrames();
		::Dynamic reverseFrames_dyn();

		void play();
		::Dynamic play_dyn();

		void pause();
		::Dynamic pause_dyn();

		void stop();
		::Dynamic stop_dyn();

		void updateStartTimes();
		::Dynamic updateStartTimes_dyn();

		void advanceTime(Float passedTime);
		::Dynamic advanceTime_dyn();

		int get_numFrames();
		::Dynamic get_numFrames_dyn();

		Float get_totalTime();
		::Dynamic get_totalTime_dyn();

		Float get_currentTime();
		::Dynamic get_currentTime_dyn();

		Float set_currentTime(Float value);
		::Dynamic set_currentTime_dyn();

		bool get_loop();
		::Dynamic get_loop_dyn();

		bool set_loop(bool value);
		::Dynamic set_loop_dyn();

		bool get_muted();
		::Dynamic get_muted_dyn();

		bool set_muted(bool value);
		::Dynamic set_muted_dyn();

		 ::openfl::media::SoundTransform get_soundTransform();
		::Dynamic get_soundTransform_dyn();

		 ::openfl::media::SoundTransform set_soundTransform( ::openfl::media::SoundTransform value);
		::Dynamic set_soundTransform_dyn();

		int get_currentFrame();
		::Dynamic get_currentFrame_dyn();

		int set_currentFrame(int value);
		::Dynamic set_currentFrame_dyn();

		Float get_fps();
		::Dynamic get_fps_dyn();

		Float set_fps(Float value);
		::Dynamic set_fps_dyn();

		bool get_isPlaying();
		::Dynamic get_isPlaying_dyn();

		bool get_isComplete();
		::Dynamic get_isComplete_dyn();

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_MovieClip */ 
