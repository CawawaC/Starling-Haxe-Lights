// Generated by Haxe 3.4.3
#ifndef INCLUDED_starling_display__MovieClip_MovieClipFrame
#define INCLUDED_starling_display__MovieClip_MovieClipFrame

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS2(openfl,media,SoundTransform)
HX_DECLARE_CLASS2(starling,animation,IAnimatable)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,MovieClip)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS3(starling,display,_MovieClip,MovieClipFrame)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace display{
namespace _MovieClip{


class HXCPP_CLASS_ATTRIBUTES MovieClipFrame_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MovieClipFrame_obj OBJ_;
		MovieClipFrame_obj();

	public:
		enum { _hx_ClassId = 0x31583924 };

		void __construct( ::starling::textures::Texture texture,hx::Null< Float >  __o_duration,hx::Null< Float >  __o_startTime);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display._MovieClip.MovieClipFrame")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display._MovieClip.MovieClipFrame"); }
		static hx::ObjectPtr< MovieClipFrame_obj > __new( ::starling::textures::Texture texture,hx::Null< Float >  __o_duration,hx::Null< Float >  __o_startTime);
		static hx::ObjectPtr< MovieClipFrame_obj > __alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture texture,hx::Null< Float >  __o_duration,hx::Null< Float >  __o_startTime);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MovieClipFrame_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MovieClipFrame","\x8d","\xf5","\xdd","\x99"); }

		 ::starling::textures::Texture texture;
		 ::openfl::media::Sound sound;
		Float duration;
		Float startTime;
		 ::Dynamic action;
		void playSound( ::openfl::media::SoundTransform transform);
		::Dynamic playSound_dyn();

		void executeAction( ::starling::display::MovieClip movie,int frameID);
		::Dynamic executeAction_dyn();

};

} // end namespace starling
} // end namespace display
} // end namespace _MovieClip

#endif /* INCLUDED_starling_display__MovieClip_MovieClipFrame */ 
