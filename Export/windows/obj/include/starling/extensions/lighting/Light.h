// Generated by Haxe 3.4.3
#ifndef INCLUDED_starling_extensions_lighting_Light
#define INCLUDED_starling_extensions_lighting_Light

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_349d198abd54d7ce_438_new)
HX_DECLARE_CLASS3(starling,extensions,lighting,Light)

namespace starling{
namespace extensions{
namespace lighting{


class HXCPP_CLASS_ATTRIBUTES Light_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Light_obj OBJ_;
		Light_obj();

	public:
		enum { _hx_ClassId = 0x318aea06 };

		void __construct(hx::Null< int >  __o_color,::String __o_type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.extensions.lighting.Light")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.extensions.lighting.Light"); }

		hx::ObjectPtr< Light_obj > __new(hx::Null< int >  __o_color,::String __o_type) {
			hx::ObjectPtr< Light_obj > __this = new Light_obj();
			__this->__construct(__o_color,__o_type);
			return __this;
		}

		static hx::ObjectPtr< Light_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_color,::String __o_type) {
			Light_obj *__this = (Light_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Light_obj), true, "starling.extensions.lighting.Light"));
			*(void **)__this = Light_obj::_hx_vtable;
{
int color = __o_color.Default(16777215);
::String type = __o_type.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_349d198abd54d7ce_438_new)
HXLINE( 439)		( ( ::starling::extensions::lighting::Light)(__this) )->x = (( ( ::starling::extensions::lighting::Light)(__this) )->y = (( ( ::starling::extensions::lighting::Light)(__this) )->z = ((Float)0.0)));
HXLINE( 440)		( ( ::starling::extensions::lighting::Light)(__this) )->color = color;
HXLINE( 441)		( ( ::starling::extensions::lighting::Light)(__this) )->type = type;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Light_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Light","\xb6","\x00","\x2a","\x08"); }

		Float x;
		Float y;
		Float z;
		int color;
		::String type;
};

} // end namespace starling
} // end namespace extensions
} // end namespace lighting

#endif /* INCLUDED_starling_extensions_lighting_Light */ 
