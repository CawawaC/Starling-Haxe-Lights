// Generated by Haxe 3.4.3
#ifndef INCLUDED_starling_extensions_lighting_LightEffect
#define INCLUDED_starling_extensions_lighting_LightEffect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_rendering_MeshEffect
#include <starling/rendering/MeshEffect.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS3(starling,extensions,lighting,Light)
HX_DECLARE_CLASS3(starling,extensions,lighting,LightEffect)
HX_DECLARE_CLASS2(starling,rendering,Effect)
HX_DECLARE_CLASS2(starling,rendering,FilterEffect)
HX_DECLARE_CLASS2(starling,rendering,MeshEffect)
HX_DECLARE_CLASS2(starling,rendering,Program)
HX_DECLARE_CLASS2(starling,rendering,VertexDataFormat)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace extensions{
namespace lighting{


class HXCPP_CLASS_ATTRIBUTES LightEffect_obj : public  ::starling::rendering::MeshEffect_obj
{
	public:
		typedef  ::starling::rendering::MeshEffect_obj super;
		typedef LightEffect_obj OBJ_;
		LightEffect_obj();

	public:
		enum { _hx_ClassId = 0x224f0137 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.extensions.lighting.LightEffect")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.extensions.lighting.LightEffect"); }
		static hx::ObjectPtr< LightEffect_obj > __new();
		static hx::ObjectPtr< LightEffect_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LightEffect_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("LightEffect","\xe7","\x3b","\x24","\xa9"); }

		static void __boot();
		static  ::starling::rendering::VertexDataFormat VERTEX_FORMAT;
		static  ::openfl::_Vector::AbstractVector sVector;
		::Array< ::Dynamic> _lights;
		 ::starling::textures::Texture _normalTexture;
		 ::openfl::geom::Vector3D _cameraPosition;
		 ::starling::rendering::Program createProgram();

		void beforeDraw( ::openfl::display3D::Context3D context);

		void afterDraw( ::openfl::display3D::Context3D context);

		int get_programVariantName();

		 ::starling::rendering::VertexDataFormat get_vertexFormat();

		int get_numLights();
		::Dynamic get_numLights_dyn();

		int set_numLights(int value);
		::Dynamic set_numLights_dyn();

		void setLightAt(int index,::String type,int color, ::openfl::geom::Vector3D positionOrDirection);
		::Dynamic setLightAt_dyn();

		 ::openfl::geom::Vector3D get_cameraPosition();
		::Dynamic get_cameraPosition_dyn();

		 ::openfl::geom::Vector3D set_cameraPosition( ::openfl::geom::Vector3D value);
		::Dynamic set_cameraPosition_dyn();

		 ::starling::textures::Texture get_normalTexture();
		::Dynamic get_normalTexture_dyn();

		 ::starling::textures::Texture set_normalTexture( ::starling::textures::Texture value);
		::Dynamic set_normalTexture_dyn();

};

} // end namespace starling
} // end namespace extensions
} // end namespace lighting

#endif /* INCLUDED_starling_extensions_lighting_LightEffect */ 
