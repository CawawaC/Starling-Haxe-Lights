// Generated by Haxe 3.4.3
#ifndef INCLUDED_starling_extensions_lighting_LightSource
#define INCLUDED_starling_extensions_lighting_LightSource

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Sprite3D
#include <starling/display/Sprite3D.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,display,Sprite3D)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,TouchEvent)
HX_DECLARE_CLASS3(starling,extensions,lighting,LightSource)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace extensions{
namespace lighting{


class HXCPP_CLASS_ATTRIBUTES LightSource_obj : public  ::starling::display::Sprite3D_obj
{
	public:
		typedef  ::starling::display::Sprite3D_obj super;
		typedef LightSource_obj OBJ_;
		LightSource_obj();

	public:
		enum { _hx_ClassId = 0x53c89565 };

		void __construct(::String __o_type,hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.extensions.lighting.LightSource")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.extensions.lighting.LightSource"); }
		static hx::ObjectPtr< LightSource_obj > __new(::String __o_type,hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness);
		static hx::ObjectPtr< LightSource_obj > __alloc(hx::Ctx *_hx_ctx,::String __o_type,hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LightSource_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("LightSource","\x31","\x92","\xb2","\x7a"); }

		static void __boot();
		static hx::Class LightBulbAtlas;
		static ::String ATLAS_TEXTURE_DATA_NAME;
		static ::String TYPE_POINT;
		static ::String TYPE_AMBIENT;
		static ::String TYPE_DIRECTIONAL;
		static  ::openfl::geom::Point sMovement;
		static  ::haxe::ds::StringMap sInstances;
		static  ::openfl::geom::Rectangle sRegion;
		static  ::starling::textures::Texture getBulbTexture(::String type);
		static ::Dynamic getBulbTexture_dyn();

		static ::Array< ::Dynamic> getActiveInstances( ::starling::display::Stage stage,::Array< ::Dynamic> out);
		static ::Dynamic getActiveInstances_dyn();

		static  ::starling::extensions::lighting::LightSource createPointLight(hx::Null< int >  color,hx::Null< Float >  brightness);
		static ::Dynamic createPointLight_dyn();

		static  ::starling::extensions::lighting::LightSource createAmbientLight(hx::Null< int >  color,hx::Null< Float >  brightness);
		static ::Dynamic createAmbientLight_dyn();

		static  ::starling::extensions::lighting::LightSource createDirectionalLight(hx::Null< int >  color,hx::Null< Float >  brightness);
		static ::Dynamic createDirectionalLight_dyn();

		::String _type;
		int _color;
		bool _active;
		Float _brightness;
		 ::starling::display::Image _lightBulb;
		void onAddedToStage( ::starling::events::Event event);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::starling::events::Event event);
		::Dynamic onRemovedFromStage_dyn();

		void onTouch( ::starling::events::TouchEvent event);
		::Dynamic onTouch_dyn();

		int get_color();
		::Dynamic get_color_dyn();

		int set_color(int value);
		::Dynamic set_color_dyn();

		Float get_brightness();
		::Dynamic get_brightness_dyn();

		Float set_brightness(Float value);
		::Dynamic set_brightness_dyn();

		bool get_showLightBulb();
		::Dynamic get_showLightBulb_dyn();

		bool set_showLightBulb(bool value);
		::Dynamic set_showLightBulb_dyn();

		::String get_type();
		::Dynamic get_type_dyn();

		::String set_type(::String value);
		::Dynamic set_type_dyn();

		bool get_isActive();
		::Dynamic get_isActive_dyn();

		bool set_isActive(bool value);
		::Dynamic set_isActive_dyn();

};

} // end namespace starling
} // end namespace extensions
} // end namespace lighting

#endif /* INCLUDED_starling_extensions_lighting_LightSource */ 
