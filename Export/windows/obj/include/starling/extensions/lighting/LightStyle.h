// Generated by Haxe 3.4.3
#ifndef INCLUDED_starling_extensions_lighting_LightStyle
#define INCLUDED_starling_extensions_lighting_LightStyle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,Sprite3D)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS3(starling,extensions,lighting,LightSource)
HX_DECLARE_CLASS3(starling,extensions,lighting,LightStyle)
HX_DECLARE_CLASS3(starling,extensions,lighting,Material)
HX_DECLARE_CLASS2(starling,rendering,Effect)
HX_DECLARE_CLASS2(starling,rendering,FilterEffect)
HX_DECLARE_CLASS2(starling,rendering,MeshEffect)
HX_DECLARE_CLASS2(starling,rendering,RenderState)
HX_DECLARE_CLASS2(starling,rendering,VertexDataFormat)
HX_DECLARE_CLASS2(starling,styles,MeshStyle)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace extensions{
namespace lighting{


class HXCPP_CLASS_ATTRIBUTES LightStyle_obj : public  ::starling::styles::MeshStyle_obj
{
	public:
		typedef  ::starling::styles::MeshStyle_obj super;
		typedef LightStyle_obj OBJ_;
		LightStyle_obj();

	public:
		enum { _hx_ClassId = 0x5ed02a83 };

		void __construct( ::starling::textures::Texture normalTexture);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.extensions.lighting.LightStyle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.extensions.lighting.LightStyle"); }
		static hx::ObjectPtr< LightStyle_obj > __new( ::starling::textures::Texture normalTexture);
		static hx::ObjectPtr< LightStyle_obj > __alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture normalTexture);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LightStyle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("LightStyle","\x9b","\xc0","\xd4","\xfb"); }

		static void __boot();
		static  ::starling::rendering::VertexDataFormat VERTEX_FORMAT;
		static int MAX_SHININESS;
		static int MAX_NUM_LIGHTS;
		 ::starling::textures::Texture _normalTexture;
		 ::starling::extensions::lighting::Material _material;
		 ::openfl::geom::Point sPoint;
		 ::openfl::geom::Vector3D sPoint3D;
		 ::openfl::geom::Matrix sMatrix;
		 ::openfl::geom::Matrix3D sMatrix3D;
		 ::openfl::geom::Matrix3D sMatrixAlt3D;
		 ::starling::extensions::lighting::Material sMaterial;
		::Array< ::Dynamic> sLights;
		void setNormalTexCoords(int vertexID,Float u,Float v);
		::Dynamic setNormalTexCoords_dyn();

		void setTexCoords(int vertexID,Float u,Float v);

		void copyFrom( ::starling::styles::MeshStyle meshStyle);

		void batchVertexData( ::starling::styles::MeshStyle targetStyle,hx::Null< int >  targetVertexID, ::openfl::geom::Matrix matrix,hx::Null< int >  vertexID,hx::Null< int >  numVertices);

		bool canBatchWith( ::starling::styles::MeshStyle meshStyle);

		 ::starling::rendering::MeshEffect createEffect();

		void updateEffect( ::starling::rendering::MeshEffect effect, ::starling::rendering::RenderState state);

		 ::starling::rendering::VertexDataFormat get_vertexFormat();

		void onTargetAssigned( ::starling::display::Mesh target);

		 ::starling::textures::Texture get_normalTexture();
		::Dynamic get_normalTexture_dyn();

		 ::starling::textures::Texture set_normalTexture( ::starling::textures::Texture value);
		::Dynamic set_normalTexture_dyn();

		void setVertexMaterial(int vertexID, ::starling::extensions::lighting::Material material);
		::Dynamic setVertexMaterial_dyn();

		 ::starling::extensions::lighting::Material getVertexMaterial(int vertexID, ::starling::extensions::lighting::Material out);
		::Dynamic getVertexMaterial_dyn();

		Float getAmbientRatio(int vertexID);
		::Dynamic getAmbientRatio_dyn();

		void setAmbientRatio(int vertexID,Float value);
		::Dynamic setAmbientRatio_dyn();

		Float getDiffuseRatio(int vertexID);
		::Dynamic getDiffuseRatio_dyn();

		void setDiffuseRatio(int vertexID,Float value);
		::Dynamic setDiffuseRatio_dyn();

		Float getSpecularRatio(int vertexID);
		::Dynamic getSpecularRatio_dyn();

		void setSpecularRatio(int vertexID,Float value);
		::Dynamic setSpecularRatio_dyn();

		Float getShininess(int vertexID);
		::Dynamic getShininess_dyn();

		void setShininess(int vertexID,Float value);
		::Dynamic setShininess_dyn();

		Float get_ambientRatio();
		::Dynamic get_ambientRatio_dyn();

		Float set_ambientRatio(Float value);
		::Dynamic set_ambientRatio_dyn();

		Float get_diffuseRatio();
		::Dynamic get_diffuseRatio_dyn();

		Float set_diffuseRatio(Float value);
		::Dynamic set_diffuseRatio_dyn();

		Float get_specularRatio();
		::Dynamic get_specularRatio_dyn();

		Float set_specularRatio(Float value);
		::Dynamic set_specularRatio_dyn();

		Float get_shininess();
		::Dynamic get_shininess_dyn();

		Float set_shininess(Float value);
		::Dynamic set_shininess_dyn();

};

} // end namespace starling
} // end namespace extensions
} // end namespace lighting

#endif /* INCLUDED_starling_extensions_lighting_LightStyle */ 
