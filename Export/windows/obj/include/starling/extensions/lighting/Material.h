// Generated by Haxe 3.4.3
#ifndef INCLUDED_starling_extensions_lighting_Material
#define INCLUDED_starling_extensions_lighting_Material

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(starling,extensions,lighting,Material)

namespace starling{
namespace extensions{
namespace lighting{


class HXCPP_CLASS_ATTRIBUTES Material_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Material_obj OBJ_;
		Material_obj();

	public:
		enum { _hx_ClassId = 0x2677f5db };

		void __construct(hx::Null< Float >  __o_ambientRatio,hx::Null< Float >  __o_diffuseRatio,hx::Null< Float >  __o_specularRatio,hx::Null< Float >  __o_shininess);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.extensions.lighting.Material")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.extensions.lighting.Material"); }
		static hx::ObjectPtr< Material_obj > __new(hx::Null< Float >  __o_ambientRatio,hx::Null< Float >  __o_diffuseRatio,hx::Null< Float >  __o_specularRatio,hx::Null< Float >  __o_shininess);
		static hx::ObjectPtr< Material_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_ambientRatio,hx::Null< Float >  __o_diffuseRatio,hx::Null< Float >  __o_specularRatio,hx::Null< Float >  __o_shininess);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Material_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Material","\xc7","\x18","\x57","\xca"); }

		Float ambientRatio;
		Float diffuseRatio;
		Float specularRatio;
		Float shininess;
		void copyFrom( ::starling::extensions::lighting::Material material);
		::Dynamic copyFrom_dyn();

		void decode(int encoded);
		::Dynamic decode_dyn();

		int encode();
		::Dynamic encode_dyn();

};

} // end namespace starling
} // end namespace extensions
} // end namespace lighting

#endif /* INCLUDED_starling_extensions_lighting_Material */ 
