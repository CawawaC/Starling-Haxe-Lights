// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_Demo
#include <Demo.h>
#endif
#ifndef INCLUDED_Startup
#include <Startup.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_system_Capabilities
#include <openfl/system/Capabilities.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3d5fcd1b67a850b6_24_new,"Startup","new",0x8ae2528f,"Startup.new","Startup.hx",24,0x27a773c1)

void Startup_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_3d5fcd1b67a850b6_24_new)
HXLINE(  25)		super::__construct();
HXLINE(  26)		 ::openfl::geom::Rectangle viewPort = null();
HXLINE(  28)		if (!(::starling::utils::SystemUtil_obj::get_isDesktop())) {
HXLINE(  30)			Float viewPort1;
HXDLIN(  30)			int _hx_int = this->stage->get_fullScreenWidth();
HXDLIN(  30)			if ((_hx_int < (int)0)) {
HXLINE(  30)				viewPort1 = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE(  30)				viewPort1 = (_hx_int + ((Float)0.0));
            			}
HXDLIN(  30)			int int1 = this->stage->get_fullScreenHeight();
HXDLIN(  30)			Float viewPort2;
HXDLIN(  30)			if ((int1 < (int)0)) {
HXLINE(  30)				viewPort2 = (((Float)4294967296.0) + int1);
            			}
            			else {
HXLINE(  30)				viewPort2 = (int1 + ((Float)0.0));
            			}
HXDLIN(  30)			viewPort =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,viewPort1,viewPort2);
            		}
HXLINE(  33)		this->_starling =  ::starling::core::Starling_obj::__alloc( HX_CTX ,hx::ClassOf< ::Demo >(),this->stage,viewPort,null(),null(),null());
HXLINE(  34)		this->_starling->set_enableErrorChecking(::openfl::_hx_system::Capabilities_obj::isDebugger);
HXLINE(  35)		this->_starling->set_skipUnchangedFrames(true);
HXLINE(  36)		this->_starling->set_showStats(false);
HXLINE(  37)		this->_starling->start();
            	}

Dynamic Startup_obj::__CreateEmpty() { return new Startup_obj; }

void *Startup_obj::_hx_vtable = 0;

Dynamic Startup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Startup_obj > _hx_result = new Startup_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Startup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x026c5f1d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x026c5f1d;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}


hx::ObjectPtr< Startup_obj > Startup_obj::__new() {
	hx::ObjectPtr< Startup_obj > __this = new Startup_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Startup_obj > Startup_obj::__alloc(hx::Ctx *_hx_ctx) {
	Startup_obj *__this = (Startup_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Startup_obj), true, "Startup"));
	*(void **)__this = Startup_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Startup_obj::Startup_obj()
{
}

void Startup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Startup);
	HX_MARK_MEMBER_NAME(_starling,"_starling");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Startup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_starling,"_starling");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Startup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_starling") ) { return hx::Val( _starling ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Startup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_starling") ) { _starling=inValue.Cast<  ::starling::core::Starling >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Startup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_starling","\x27","\x44","\xf8","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Startup_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::core::Starling*/ ,(int)offsetof(Startup_obj,_starling),HX_HCSTRING("_starling","\x27","\x44","\xf8","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Startup_obj_sStaticStorageInfo = 0;
#endif

static ::String Startup_obj_sMemberFields[] = {
	HX_HCSTRING("_starling","\x27","\x44","\xf8","\x84"),
	::String(null()) };

static void Startup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Startup_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Startup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Startup_obj::__mClass,"__mClass");
};

#endif

hx::Class Startup_obj::__mClass;

void Startup_obj::__register()
{
	hx::Object *dummy = new Startup_obj;
	Startup_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Startup","\x1d","\x5f","\x6c","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Startup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Startup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Startup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Startup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Startup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Startup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

