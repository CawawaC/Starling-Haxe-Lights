// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_filters__ColorMatrixFilter_ColorMatrixShader
#include <openfl/filters/_ColorMatrixFilter/ColorMatrixShader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_65d84bf4a5bd7bcf_173_new,"openfl.filters._ColorMatrixFilter.ColorMatrixShader","new",0xf11da59b,"openfl.filters._ColorMatrixFilter.ColorMatrixShader.new","openfl/filters/ColorMatrixFilter.hx",173,0xb64128b5)
HX_LOCAL_STACK_FRAME(_hx_pos_65d84bf4a5bd7bcf_185_init,"openfl.filters._ColorMatrixFilter.ColorMatrixShader","init",0x058bf975,"openfl.filters._ColorMatrixFilter.ColorMatrixShader.init","openfl/filters/ColorMatrixFilter.hx",185,0xb64128b5)
namespace openfl{
namespace filters{
namespace _ColorMatrixFilter{

void ColorMatrixShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_65d84bf4a5bd7bcf_173_new)
HXLINE( 111)		if (hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 111)			this->_hx___glFragmentSource = HX_("varying float vAlpha;\r\n\t\tvarying vec2 vTexCoord;\r\n\t\tuniform sampler2D uImage0;\r\n\t\t\r\n\t\tuniform mat4 uMultipliers;\r\n\t\tuniform vec4 uOffsets;\r\n\t\t\r\n\t\tvoid main(void) {\r\n\t\t\t\r\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\r\n\t\t\t\r\n\t\t\tif (color.a == 0.0) {\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\r\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}",0a,e8,2e,01);
            		}
HXLINE( 175)		super::__construct(null());
HXLINE( 178)		 ::Dynamic(this->get_data()->__Field(HX_("uMultipliers",5d,5b,61,e5),hx::paccDynamic))->__SetField(HX_("value",71,7f,b8,31),::cpp::VirtualArray_obj::__new(16)->init(0,(int)1)->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(int)1)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,(int)0)->init(13,(int)0)->init(14,(int)0)->init(15,(int)1),hx::paccDynamic);
HXLINE( 179)		 ::Dynamic(this->get_data()->__Field(HX_("uOffsets",8b,59,c4,c8),hx::paccDynamic))->__SetField(HX_("value",71,7f,b8,31),::cpp::VirtualArray_obj::__new(4)->init(0,(int)0)->init(1,(int)0)->init(2,(int)0)->init(3,(int)0),hx::paccDynamic);
            	}

Dynamic ColorMatrixShader_obj::__CreateEmpty() { return new ColorMatrixShader_obj; }

void *ColorMatrixShader_obj::_hx_vtable = 0;

Dynamic ColorMatrixShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorMatrixShader_obj > _hx_result = new ColorMatrixShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorMatrixShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2ef70f6d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2ef70f6d;
	} else {
		return inClassId==(int)0x676ab1f7;
	}
}

void ColorMatrixShader_obj::init(::Array< Float > matrix){
            	HX_STACKFRAME(&_hx_pos_65d84bf4a5bd7bcf_185_init)
HXLINE( 187)		::Array< Float > multipliers = ( (::Array< Float >)( ::Dynamic(this->get_data()->__Field(HX_("uMultipliers",5d,5b,61,e5),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE( 188)		::Array< Float > offsets = ( (::Array< Float >)( ::Dynamic(this->get_data()->__Field(HX_("uOffsets",8b,59,c4,c8),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE( 190)		multipliers[(int)0] = matrix->__get((int)0);
HXLINE( 191)		multipliers[(int)1] = matrix->__get((int)1);
HXLINE( 192)		multipliers[(int)2] = matrix->__get((int)2);
HXLINE( 193)		multipliers[(int)3] = matrix->__get((int)3);
HXLINE( 194)		multipliers[(int)4] = matrix->__get((int)5);
HXLINE( 195)		multipliers[(int)5] = matrix->__get((int)6);
HXLINE( 196)		multipliers[(int)6] = matrix->__get((int)7);
HXLINE( 197)		multipliers[(int)7] = matrix->__get((int)8);
HXLINE( 198)		multipliers[(int)8] = matrix->__get((int)10);
HXLINE( 199)		multipliers[(int)9] = matrix->__get((int)11);
HXLINE( 200)		multipliers[(int)10] = matrix->__get((int)12);
HXLINE( 201)		multipliers[(int)11] = matrix->__get((int)13);
HXLINE( 202)		multipliers[(int)12] = matrix->__get((int)15);
HXLINE( 203)		multipliers[(int)13] = matrix->__get((int)16);
HXLINE( 204)		multipliers[(int)14] = matrix->__get((int)17);
HXLINE( 205)		multipliers[(int)15] = matrix->__get((int)18);
HXLINE( 207)		offsets[(int)0] = ((Float)matrix->__get((int)4) / (Float)((Float)255.0));
HXLINE( 208)		offsets[(int)1] = ((Float)matrix->__get((int)9) / (Float)((Float)255.0));
HXLINE( 209)		offsets[(int)2] = ((Float)matrix->__get((int)14) / (Float)((Float)255.0));
HXLINE( 210)		offsets[(int)3] = ((Float)matrix->__get((int)19) / (Float)((Float)255.0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrixShader_obj,init,(void))


hx::ObjectPtr< ColorMatrixShader_obj > ColorMatrixShader_obj::__new() {
	hx::ObjectPtr< ColorMatrixShader_obj > __this = new ColorMatrixShader_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ColorMatrixShader_obj > ColorMatrixShader_obj::__alloc(hx::Ctx *_hx_ctx) {
	ColorMatrixShader_obj *__this = (ColorMatrixShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ColorMatrixShader_obj), true, "openfl.filters._ColorMatrixFilter.ColorMatrixShader"));
	*(void **)__this = ColorMatrixShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ColorMatrixShader_obj::ColorMatrixShader_obj()
{
}

hx::Val ColorMatrixShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ColorMatrixShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ColorMatrixShader_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorMatrixShader_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void ColorMatrixShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorMatrixShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorMatrixShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorMatrixShader_obj::__mClass,"__mClass");
};

#endif

hx::Class ColorMatrixShader_obj::__mClass;

void ColorMatrixShader_obj::__register()
{
	hx::Object *dummy = new ColorMatrixShader_obj;
	ColorMatrixShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters._ColorMatrixFilter.ColorMatrixShader","\x29","\x3c","\x26","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ColorMatrixShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorMatrixShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorMatrixShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorMatrixShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorMatrixShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorMatrixShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace filters
} // end namespace _ColorMatrixFilter
