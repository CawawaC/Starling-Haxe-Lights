// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MovieClip
#include <starling/display/MovieClip.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display__MovieClip_MovieClipFrame
#include <starling/display/_MovieClip/MovieClipFrame.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2dd8d2718d458045_49_new,"starling.display.MovieClip","new",0x42ca1820,"starling.display.MovieClip.new","starling/display/MovieClip.hx",49,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_77_init,"starling.display.MovieClip","init",0x2ac3bb50,"starling.display.MovieClip.init","starling/display/MovieClip.hx",77,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_100_addFrame,"starling.display.MovieClip","addFrame",0xacce3e8c,"starling.display.MovieClip.addFrame","starling/display/MovieClip.hx",100,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_106_addFrameAt,"starling.display.MovieClip","addFrameAt",0x2bc4329f,"starling.display.MovieClip.addFrameAt","starling/display/MovieClip.hx",106,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_126_removeFrameAt,"starling.display.MovieClip","removeFrameAt",0xa9b3aa5c,"starling.display.MovieClip.removeFrameAt","starling/display/MovieClip.hx",126,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_138_getFrameTexture,"starling.display.MovieClip","getFrameTexture",0x30f8c5a4,"starling.display.MovieClip.getFrameTexture","starling/display/MovieClip.hx",138,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_145_setFrameTexture,"starling.display.MovieClip","setFrameTexture",0x2cc442b0,"starling.display.MovieClip.setFrameTexture","starling/display/MovieClip.hx",145,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_152_getFrameSound,"starling.display.MovieClip","getFrameSound",0x48ea9558,"starling.display.MovieClip.getFrameSound","starling/display/MovieClip.hx",152,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_160_setFrameSound,"starling.display.MovieClip","setFrameSound",0x8df07764,"starling.display.MovieClip.setFrameSound","starling/display/MovieClip.hx",160,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_167_getFrameAction,"starling.display.MovieClip","getFrameAction",0x686fab0d,"starling.display.MovieClip.getFrameAction","starling/display/MovieClip.hx",167,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_174_setFrameAction,"starling.display.MovieClip","setFrameAction",0x888f9381,"starling.display.MovieClip.setFrameAction","starling/display/MovieClip.hx",174,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_181_getFrameDuration,"starling.display.MovieClip","getFrameDuration",0x5773426b,"starling.display.MovieClip.getFrameDuration","starling/display/MovieClip.hx",181,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_188_setFrameDuration,"starling.display.MovieClip","setFrameDuration",0xadb52fdf,"starling.display.MovieClip.setFrameDuration","starling/display/MovieClip.hx",188,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_197_reverseFrames,"starling.display.MovieClip","reverseFrames",0xb6e65a28,"starling.display.MovieClip.reverseFrames","starling/display/MovieClip.hx",197,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_209_play,"starling.display.MovieClip","play",0x2f62ae34,"starling.display.MovieClip.play","starling/display/MovieClip.hx",209,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_215_pause,"starling.display.MovieClip","pause",0x3fbf8eb6,"starling.display.MovieClip.pause","starling/display/MovieClip.hx",215,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_220_stop,"starling.display.MovieClip","stop",0x31647042,"starling.display.MovieClip.stop","starling/display/MovieClip.hx",220,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_229_updateStartTimes,"starling.display.MovieClip","updateStartTimes",0x762047ad,"starling.display.MovieClip.updateStartTimes","starling/display/MovieClip.hx",229,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_245_advanceTime,"starling.display.MovieClip","advanceTime",0x7d41716f,"starling.display.MovieClip.advanceTime","starling/display/MovieClip.hx",245,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_361_get_numFrames,"starling.display.MovieClip","get_numFrames",0xa7704623,"starling.display.MovieClip.get_numFrames","starling/display/MovieClip.hx",361,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_366_get_totalTime,"starling.display.MovieClip","get_totalTime",0xb3a0c988,"starling.display.MovieClip.get_totalTime","starling/display/MovieClip.hx",366,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_373_get_currentTime,"starling.display.MovieClip","get_currentTime",0x1513443d,"starling.display.MovieClip.get_currentTime","starling/display/MovieClip.hx",373,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_375_set_currentTime,"starling.display.MovieClip","set_currentTime",0x10dec149,"starling.display.MovieClip.set_currentTime","starling/display/MovieClip.hx",375,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_392_get_loop,"starling.display.MovieClip","get_loop",0xf460022d,"starling.display.MovieClip.get_loop","starling/display/MovieClip.hx",392,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_393_set_loop,"starling.display.MovieClip","set_loop",0xa2bd5ba1,"starling.display.MovieClip.set_loop","starling/display/MovieClip.hx",393,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_398_get_muted,"starling.display.MovieClip","get_muted",0x77038382,"starling.display.MovieClip.get_muted","starling/display/MovieClip.hx",398,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_399_set_muted,"starling.display.MovieClip","set_muted",0x5a546f8e,"starling.display.MovieClip.set_muted","starling/display/MovieClip.hx",399,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_403_get_soundTransform,"starling.display.MovieClip","get_soundTransform",0x70493fa6,"starling.display.MovieClip.get_soundTransform","starling/display/MovieClip.hx",403,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_404_set_soundTransform,"starling.display.MovieClip","set_soundTransform",0x4cf8721a,"starling.display.MovieClip.set_soundTransform","starling/display/MovieClip.hx",404,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_408_get_currentFrame,"starling.display.MovieClip","get_currentFrame",0x521629fd,"starling.display.MovieClip.get_currentFrame","starling/display/MovieClip.hx",408,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_410_set_currentFrame,"starling.display.MovieClip","set_currentFrame",0xa8581771,"starling.display.MovieClip.set_currentFrame","starling/display/MovieClip.hx",410,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_420_get_fps,"starling.display.MovieClip","get_fps",0xdc57b840,"starling.display.MovieClip.get_fps","starling/display/MovieClip.hx",420,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_422_set_fps,"starling.display.MovieClip","set_fps",0xcf59494c,"starling.display.MovieClip.set_fps","starling/display/MovieClip.hx",422,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_442_get_isPlaying,"starling.display.MovieClip","get_isPlaying",0xd7ffd83b,"starling.display.MovieClip.get_isPlaying","starling/display/MovieClip.hx",442,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_2dd8d2718d458045_452_get_isComplete,"starling.display.MovieClip","get_isComplete",0x5cafeb4c,"starling.display.MovieClip.get_isComplete","starling/display/MovieClip.hx",452,0xf1682f52)
namespace starling{
namespace display{

void MovieClip_obj::__construct( ::openfl::_Vector::AbstractVector textures,hx::Null< Float >  __o_fps){
Float fps = __o_fps.Default(12);
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_49_new)
HXLINE(  59)		this->_hx___soundTransform = null();
HXLINE(  65)		if ((::openfl::_Vector::IVector_obj::get_length(textures->data) > (int)0)) {
HXLINE(  67)			super::__construct(( ( ::starling::textures::Texture)(::openfl::_Vector::IVector_obj::get(textures->data,(int)0)) ));
HXLINE(  68)			this->init(textures,fps);
            		}
            		else {
HXLINE(  72)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Empty texture array",a1,f3,a8,cd)));
            		}
            	}

Dynamic MovieClip_obj::__CreateEmpty() { return new MovieClip_obj; }

void *MovieClip_obj::_hx_vtable = 0;

Dynamic MovieClip_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MovieClip_obj > _hx_result = new MovieClip_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MovieClip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f9ca8e1) {
		if (inClassId<=(int)0x3cebba07) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x3cebba07;
			}
		} else {
			return inClassId==(int)0x3f9ca8e1;
		}
	} else {
		if (inClassId<=(int)0x4fcbd265) {
			return inClassId==(int)0x4eb0110e || inClassId==(int)0x4fcbd265;
		} else {
			return inClassId==(int)0x6dea180f;
		}
	}
}

static ::starling::animation::IAnimatable_obj _hx_starling_display_MovieClip__hx_starling_animation_IAnimatable= {
	( void (hx::Object::*)(Float))&::starling::display::MovieClip_obj::advanceTime,
};

void *MovieClip_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9e9125cb: return &_hx_starling_display_MovieClip__hx_starling_animation_IAnimatable;
	}
	return super::_hx_getInterface(inHash);
}

void MovieClip_obj::init( ::openfl::_Vector::AbstractVector textures,Float fps){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_77_init)
HXLINE(  78)		if ((fps <= (int)0)) {
HXLINE(  78)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid fps: ",c6,50,77,e9) + fps)));
            		}
HXLINE(  79)		int numFrames = ::openfl::_Vector::IVector_obj::get_length(textures->data);
HXLINE(  81)		this->_hx___defaultFrameDuration = ((Float)((Float)1.0) / (Float)fps);
HXLINE(  82)		this->_hx___loop = true;
HXLINE(  83)		this->_hx___playing = true;
HXLINE(  84)		this->_hx___currentTime = ((Float)0.0);
HXLINE(  85)		this->_hx___currentFrameID = (int)0;
HXLINE(  86)		this->_hx___wasStopped = true;
HXLINE(  87)		int length = null();
HXDLIN(  87)		bool fixed = null();
HXDLIN(  87)		this->_hx___frames =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE(  89)		{
HXLINE(  89)			int _g1 = (int)0;
HXDLIN(  89)			int _g = numFrames;
HXDLIN(  89)			while((_g1 < _g)){
HXLINE(  89)				_g1 = (_g1 + (int)1);
HXDLIN(  89)				int i = (_g1 - (int)1);
HXLINE(  90)				{
HXLINE(  90)					 ::openfl::_Vector::AbstractVector this1 = this->_hx___frames;
HXLINE(  91)					 ::starling::textures::Texture value = ( ( ::starling::textures::Texture)(::openfl::_Vector::IVector_obj::get(textures->data,i)) );
HXDLIN(  91)					Float value1 = this->_hx___defaultFrameDuration;
HXLINE(  90)					 ::starling::display::_MovieClip::MovieClipFrame value2 =  ::starling::display::_MovieClip::MovieClipFrame_obj::__alloc( HX_CTX ,value,value1,(this->_hx___defaultFrameDuration * i));
HXDLIN(  90)					::openfl::_Vector::IVector_obj::set(this1->data,i,value2);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,init,(void))

void MovieClip_obj::addFrame( ::starling::textures::Texture texture, ::openfl::media::Sound sound,hx::Null< Float >  __o_duration){
Float duration = __o_duration.Default(-1);
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_100_addFrame)
HXDLIN( 100)		this->addFrameAt(this->get_numFrames(),texture,sound,duration);
            	}


HX_DEFINE_DYNAMIC_FUNC3(MovieClip_obj,addFrame,(void))

void MovieClip_obj::addFrameAt(int frameID, ::starling::textures::Texture texture, ::openfl::media::Sound sound,hx::Null< Float >  __o_duration){
Float duration = __o_duration.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_106_addFrameAt)
HXLINE( 107)		bool _hx_tmp;
HXDLIN( 107)		if ((frameID >= (int)0)) {
HXLINE( 107)			_hx_tmp = (frameID > this->get_numFrames());
            		}
            		else {
HXLINE( 107)			_hx_tmp = true;
            		}
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 107)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 108)		if ((duration < (int)0)) {
HXLINE( 108)			duration = this->_hx___defaultFrameDuration;
            		}
HXLINE( 110)		 ::starling::display::_MovieClip::MovieClipFrame frame =  ::starling::display::_MovieClip::MovieClipFrame_obj::__alloc( HX_CTX ,texture,duration,null());
HXLINE( 111)		frame->sound = sound;
HXLINE( 112)		::openfl::_Vector::IVector_obj::insertAt(this->_hx___frames->data,frameID,frame);
HXLINE( 114)		if ((frameID == this->get_numFrames())) {
HXLINE( 116)			Float prevStartTime;
HXDLIN( 116)			if ((frameID > (int)0)) {
HXLINE( 116)				::Dynamic this1 = this->_hx___frames->data;
HXDLIN( 116)				prevStartTime = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this1,(frameID - (int)1))) )->startTime;
            			}
            			else {
HXLINE( 116)				prevStartTime = ((Float)0.0);
            			}
HXLINE( 117)			Float prevDuration;
HXDLIN( 117)			if ((frameID > (int)0)) {
HXLINE( 117)				::Dynamic this2 = this->_hx___frames->data;
HXDLIN( 117)				prevDuration = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this2,(frameID - (int)1))) )->duration;
            			}
            			else {
HXLINE( 117)				prevDuration = ((Float)0.0);
            			}
HXLINE( 118)			frame->startTime = (prevStartTime + prevDuration);
            		}
            		else {
HXLINE( 121)			this->updateStartTimes();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(MovieClip_obj,addFrameAt,(void))

void MovieClip_obj::removeFrameAt(int frameID){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_126_removeFrameAt)
HXLINE( 127)		bool _hx_tmp;
HXDLIN( 127)		if ((frameID >= (int)0)) {
HXLINE( 127)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 127)			_hx_tmp = true;
            		}
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 127)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 128)		if ((this->get_numFrames() == (int)1)) {
HXLINE( 128)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Movie clip must not be empty",d4,d6,3f,86)));
            		}
HXLINE( 130)		::openfl::_Vector::IVector_obj::removeAt(this->_hx___frames->data,frameID);
HXLINE( 132)		if ((frameID != this->get_numFrames())) {
HXLINE( 133)			this->updateStartTimes();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,removeFrameAt,(void))

 ::starling::textures::Texture MovieClip_obj::getFrameTexture(int frameID){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_138_getFrameTexture)
HXLINE( 139)		bool _hx_tmp;
HXDLIN( 139)		if ((frameID >= (int)0)) {
HXLINE( 139)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 139)			_hx_tmp = true;
            		}
HXDLIN( 139)		if (_hx_tmp) {
HXLINE( 139)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 140)		return ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,getFrameTexture,return )

void MovieClip_obj::setFrameTexture(int frameID, ::starling::textures::Texture texture){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_145_setFrameTexture)
HXLINE( 146)		bool _hx_tmp;
HXDLIN( 146)		if ((frameID >= (int)0)) {
HXLINE( 146)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 146)			_hx_tmp = true;
            		}
HXDLIN( 146)		if (_hx_tmp) {
HXLINE( 146)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 147)		( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->texture = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,setFrameTexture,(void))

 ::openfl::media::Sound MovieClip_obj::getFrameSound(int frameID){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_152_getFrameSound)
HXLINE( 153)		bool _hx_tmp;
HXDLIN( 153)		if ((frameID >= (int)0)) {
HXLINE( 153)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 153)			_hx_tmp = true;
            		}
HXDLIN( 153)		if (_hx_tmp) {
HXLINE( 153)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 154)		return ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->sound;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,getFrameSound,return )

void MovieClip_obj::setFrameSound(int frameID, ::openfl::media::Sound sound){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_160_setFrameSound)
HXLINE( 161)		bool _hx_tmp;
HXDLIN( 161)		if ((frameID >= (int)0)) {
HXLINE( 161)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 161)			_hx_tmp = true;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXLINE( 161)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 162)		( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->sound = sound;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,setFrameSound,(void))

 ::Dynamic MovieClip_obj::getFrameAction(int frameID){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_167_getFrameAction)
HXLINE( 168)		bool _hx_tmp;
HXDLIN( 168)		if ((frameID >= (int)0)) {
HXLINE( 168)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 168)			_hx_tmp = true;
            		}
HXDLIN( 168)		if (_hx_tmp) {
HXLINE( 168)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 169)		return ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->action;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,getFrameAction,return )

void MovieClip_obj::setFrameAction(int frameID, ::Dynamic action){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_174_setFrameAction)
HXLINE( 175)		bool _hx_tmp;
HXDLIN( 175)		if ((frameID >= (int)0)) {
HXLINE( 175)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 175)			_hx_tmp = true;
            		}
HXDLIN( 175)		if (_hx_tmp) {
HXLINE( 175)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 176)		( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->action = action;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,setFrameAction,(void))

Float MovieClip_obj::getFrameDuration(int frameID){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_181_getFrameDuration)
HXLINE( 182)		bool _hx_tmp;
HXDLIN( 182)		if ((frameID >= (int)0)) {
HXLINE( 182)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 182)			_hx_tmp = true;
            		}
HXDLIN( 182)		if (_hx_tmp) {
HXLINE( 182)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 183)		return ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->duration;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,getFrameDuration,return )

void MovieClip_obj::setFrameDuration(int frameID,Float duration){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_188_setFrameDuration)
HXLINE( 189)		bool _hx_tmp;
HXDLIN( 189)		if ((frameID >= (int)0)) {
HXLINE( 189)			_hx_tmp = (frameID >= this->get_numFrames());
            		}
            		else {
HXLINE( 189)			_hx_tmp = true;
            		}
HXDLIN( 189)		if (_hx_tmp) {
HXLINE( 189)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 190)		( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,frameID)) )->duration = duration;
HXLINE( 191)		this->updateStartTimes();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,setFrameDuration,(void))

void MovieClip_obj::reverseFrames(){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_197_reverseFrames)
HXLINE( 198)		 ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::reverse(this->_hx___frames->data),null());
HXLINE( 199)		Float _hx_tmp = this->get_totalTime();
HXDLIN( 199)		this->_hx___currentTime = (_hx_tmp - this->_hx___currentTime);
HXLINE( 200)		int _hx_tmp1 = this->get_numFrames();
HXDLIN( 200)		this->_hx___currentFrameID = ((_hx_tmp1 - this->_hx___currentFrameID) - (int)1);
HXLINE( 201)		this->updateStartTimes();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,reverseFrames,(void))

void MovieClip_obj::play(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_209_play)
HXDLIN( 209)		this->_hx___playing = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,play,(void))

void MovieClip_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_215_pause)
HXDLIN( 215)		this->_hx___playing = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,pause,(void))

void MovieClip_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_220_stop)
HXLINE( 221)		this->_hx___playing = false;
HXLINE( 222)		this->_hx___wasStopped = true;
HXLINE( 223)		this->set_currentFrame((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,stop,(void))

void MovieClip_obj::updateStartTimes(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_229_updateStartTimes)
HXLINE( 230)		int numFrames = this->get_numFrames();
HXLINE( 231)		 ::starling::display::_MovieClip::MovieClipFrame prevFrame = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,(int)0)) );
HXLINE( 232)		prevFrame->startTime = (int)0;
HXLINE( 234)		{
HXLINE( 234)			int _g1 = (int)1;
HXDLIN( 234)			int _g = numFrames;
HXDLIN( 234)			while((_g1 < _g)){
HXLINE( 234)				_g1 = (_g1 + (int)1);
HXDLIN( 234)				int i = (_g1 - (int)1);
HXLINE( 236)				( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,i)) )->startTime = (prevFrame->startTime + prevFrame->duration);
HXLINE( 237)				prevFrame = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,i)) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,updateStartTimes,(void))

void MovieClip_obj::advanceTime(Float passedTime){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_245_advanceTime)
HXLINE( 246)		if (!(this->_hx___playing)) {
HXLINE( 246)			return;
            		}
HXLINE( 252)		 ::starling::display::_MovieClip::MovieClipFrame frame = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,this->_hx___currentFrameID)) );
HXLINE( 254)		if (this->_hx___wasStopped) {
HXLINE( 259)			this->_hx___wasStopped = false;
HXLINE( 260)			frame->playSound(this->_hx___soundTransform);
HXLINE( 262)			if (hx::IsNotNull( frame->action )) {
HXLINE( 264)				frame->executeAction(hx::ObjectPtr<OBJ_>(this),this->_hx___currentFrameID);
HXLINE( 265)				this->advanceTime(passedTime);
HXLINE( 266)				return;
            			}
            		}
HXLINE( 270)		Float _hx_tmp = this->_hx___currentTime;
HXDLIN( 270)		if ((_hx_tmp == this->get_totalTime())) {
HXLINE( 272)			if (this->_hx___loop) {
HXLINE( 274)				this->_hx___currentTime = ((Float)0.0);
HXLINE( 275)				this->_hx___currentFrameID = (int)0;
HXLINE( 276)				frame = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,(int)0)) );
HXLINE( 277)				frame->playSound(this->_hx___soundTransform);
HXLINE( 278)				this->set_texture(frame->texture);
HXLINE( 280)				if (hx::IsNotNull( frame->action )) {
HXLINE( 282)					frame->executeAction(hx::ObjectPtr<OBJ_>(this),this->_hx___currentFrameID);
HXLINE( 283)					this->advanceTime(passedTime);
HXLINE( 284)					return;
            				}
            			}
            			else {
HXLINE( 287)				return;
            			}
            		}
HXLINE( 290)		int finalFrameID = (::openfl::_Vector::IVector_obj::get_length(this->_hx___frames->data) - (int)1);
HXLINE( 291)		Float restTimeInFrame = ((frame->duration - this->_hx___currentTime) + frame->startTime);
HXLINE( 292)		bool dispatchCompleteEvent = false;
HXLINE( 293)		 ::Dynamic frameAction = null();
HXLINE( 294)		int previousFrameID = this->_hx___currentFrameID;
HXLINE( 295)		bool changedFrame;
HXLINE( 297)		while((passedTime >= restTimeInFrame)){
HXLINE( 299)			changedFrame = false;
HXLINE( 300)			passedTime = (passedTime - restTimeInFrame);
HXLINE( 301)			this->_hx___currentTime = (frame->startTime + frame->duration);
HXLINE( 303)			if ((this->_hx___currentFrameID == finalFrameID)) {
HXLINE( 305)				if (this->hasEventListener(HX_("complete",b9,00,c8,7f),null())) {
HXLINE( 307)					dispatchCompleteEvent = true;
            				}
            				else {
HXLINE( 309)					if (this->_hx___loop) {
HXLINE( 311)						this->_hx___currentTime = (int)0;
HXLINE( 312)						this->_hx___currentFrameID = (int)0;
HXLINE( 313)						changedFrame = true;
            					}
            					else {
HXLINE( 315)						return;
            					}
            				}
            			}
            			else {
HXLINE( 319)				 ::starling::display::MovieClip _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 319)				_hx_tmp1->_hx___currentFrameID = (_hx_tmp1->_hx___currentFrameID + (int)1);
HXLINE( 320)				changedFrame = true;
            			}
HXLINE( 323)			frame = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,this->_hx___currentFrameID)) );
HXLINE( 324)			frameAction = frame->action;
HXLINE( 326)			if (changedFrame) {
HXLINE( 327)				frame->playSound(this->_hx___soundTransform);
            			}
HXLINE( 329)			if (dispatchCompleteEvent) {
HXLINE( 331)				this->set_texture(frame->texture);
HXLINE( 332)				this->dispatchEventWith(HX_("complete",b9,00,c8,7f),null(),null());
HXLINE( 333)				this->advanceTime(passedTime);
HXLINE( 334)				return;
            			}
            			else {
HXLINE( 336)				if (hx::IsNotNull( frameAction )) {
HXLINE( 338)					this->set_texture(frame->texture);
HXLINE( 339)					frame->executeAction(hx::ObjectPtr<OBJ_>(this),this->_hx___currentFrameID);
HXLINE( 340)					this->advanceTime(passedTime);
HXLINE( 341)					return;
            				}
            			}
HXLINE( 344)			restTimeInFrame = frame->duration;
HXLINE( 347)			bool _hx_tmp2;
HXDLIN( 347)			if (((passedTime + ((Float)0.0001)) > restTimeInFrame)) {
HXLINE( 347)				_hx_tmp2 = ((passedTime - ((Float)0.0001)) < restTimeInFrame);
            			}
            			else {
HXLINE( 347)				_hx_tmp2 = false;
            			}
HXDLIN( 347)			if (_hx_tmp2) {
HXLINE( 348)				passedTime = restTimeInFrame;
            			}
            		}
HXLINE( 351)		if ((previousFrameID != this->_hx___currentFrameID)) {
HXLINE( 352)			this->set_texture(( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,this->_hx___currentFrameID)) )->texture);
            		}
HXLINE( 354)		 ::starling::display::MovieClip _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 354)		_hx_tmp3->_hx___currentTime = (_hx_tmp3->_hx___currentTime + passedTime);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,advanceTime,(void))

int MovieClip_obj::get_numFrames(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_361_get_numFrames)
HXDLIN( 361)		return ::openfl::_Vector::IVector_obj::get_length(this->_hx___frames->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_numFrames,return )

Float MovieClip_obj::get_totalTime(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_366_get_totalTime)
HXLINE( 367)		 ::openfl::_Vector::AbstractVector this1 = this->_hx___frames;
HXDLIN( 367)		int index = (::openfl::_Vector::IVector_obj::get_length(this->_hx___frames->data) - (int)1);
HXDLIN( 367)		 ::starling::display::_MovieClip::MovieClipFrame lastFrame = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this1->data,index)) );
HXLINE( 368)		return (lastFrame->startTime + lastFrame->duration);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_totalTime,return )

Float MovieClip_obj::get_currentTime(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_373_get_currentTime)
HXDLIN( 373)		return this->_hx___currentTime;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentTime,return )

Float MovieClip_obj::set_currentTime(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_375_set_currentTime)
HXLINE( 376)		bool _hx_tmp;
HXDLIN( 376)		if (!((value < (int)0))) {
HXLINE( 376)			_hx_tmp = (value > this->get_totalTime());
            		}
            		else {
HXLINE( 376)			_hx_tmp = true;
            		}
HXDLIN( 376)		if (_hx_tmp) {
HXLINE( 376)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid time: ",1c,ca,49,ec) + value)));
            		}
HXLINE( 378)		int lastFrameID = (::openfl::_Vector::IVector_obj::get_length(this->_hx___frames->data) - (int)1);
HXLINE( 379)		this->_hx___currentTime = value;
HXLINE( 380)		this->_hx___currentFrameID = (int)0;
HXLINE( 382)		while(true){
HXLINE( 382)			bool _hx_tmp1;
HXDLIN( 382)			if ((this->_hx___currentFrameID < lastFrameID)) {
HXLINE( 382)				_hx_tmp1 = (( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,(this->_hx___currentFrameID + (int)1))) )->startTime <= value);
            			}
            			else {
HXLINE( 382)				_hx_tmp1 = false;
            			}
HXDLIN( 382)			if (!(_hx_tmp1)) {
HXLINE( 382)				goto _hx_goto_25;
            			}
HXLINE( 383)			++this->_hx___currentFrameID;
            		}
            		_hx_goto_25:;
HXLINE( 385)		 ::starling::display::_MovieClip::MovieClipFrame frame = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,this->_hx___currentFrameID)) );
HXLINE( 386)		this->set_texture(frame->texture);
HXLINE( 387)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_currentTime,return )

bool MovieClip_obj::get_loop(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_392_get_loop)
HXDLIN( 392)		return this->_hx___loop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_loop,return )

bool MovieClip_obj::set_loop(bool value){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_393_set_loop)
HXDLIN( 393)		return (this->_hx___loop = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_loop,return )

bool MovieClip_obj::get_muted(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_398_get_muted)
HXDLIN( 398)		return this->_hx___muted;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_muted,return )

bool MovieClip_obj::set_muted(bool value){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_399_set_muted)
HXDLIN( 399)		return (this->_hx___muted = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_muted,return )

 ::openfl::media::SoundTransform MovieClip_obj::get_soundTransform(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_403_get_soundTransform)
HXDLIN( 403)		return this->_hx___soundTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_soundTransform,return )

 ::openfl::media::SoundTransform MovieClip_obj::set_soundTransform( ::openfl::media::SoundTransform value){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_404_set_soundTransform)
HXDLIN( 404)		return (this->_hx___soundTransform = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_soundTransform,return )

int MovieClip_obj::get_currentFrame(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_408_get_currentFrame)
HXDLIN( 408)		return this->_hx___currentFrameID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrame,return )

int MovieClip_obj::set_currentFrame(int value){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_410_set_currentFrame)
HXLINE( 411)		bool _hx_tmp;
HXDLIN( 411)		if ((value >= (int)0)) {
HXLINE( 411)			_hx_tmp = (value >= this->get_numFrames());
            		}
            		else {
HXLINE( 411)			_hx_tmp = true;
            		}
HXDLIN( 411)		if (_hx_tmp) {
HXLINE( 411)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid frame id",57,50,bd,2a)));
            		}
HXLINE( 412)		this->set_currentTime(( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,value)) )->startTime);
HXLINE( 413)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_currentFrame,return )

Float MovieClip_obj::get_fps(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_420_get_fps)
HXDLIN( 420)		return ((Float)((Float)1.0) / (Float)this->_hx___defaultFrameDuration);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_fps,return )

Float MovieClip_obj::set_fps(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_2dd8d2718d458045_422_set_fps)
HXLINE( 423)		if ((value <= (int)0)) {
HXLINE( 423)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid fps: ",c6,50,77,e9) + value)));
            		}
HXLINE( 425)		Float newFrameDuration = ((Float)((Float)1.0) / (Float)value);
HXLINE( 426)		Float acceleration = ((Float)newFrameDuration / (Float)this->_hx___defaultFrameDuration);
HXLINE( 427)		 ::starling::display::MovieClip _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 427)		_hx_tmp->_hx___currentTime = (_hx_tmp->_hx___currentTime * acceleration);
HXLINE( 428)		this->_hx___defaultFrameDuration = newFrameDuration;
HXLINE( 430)		{
HXLINE( 430)			int _g1 = (int)0;
HXDLIN( 430)			int _g = this->get_numFrames();
HXDLIN( 430)			while((_g1 < _g)){
HXLINE( 430)				_g1 = (_g1 + (int)1);
HXDLIN( 430)				int i = (_g1 - (int)1);
HXLINE( 431)				 ::starling::display::_MovieClip::MovieClipFrame _hx_tmp1 = ( ( ::starling::display::_MovieClip::MovieClipFrame)(::openfl::_Vector::IVector_obj::get(this->_hx___frames->data,i)) );
HXDLIN( 431)				_hx_tmp1->duration = (_hx_tmp1->duration * acceleration);
            			}
            		}
HXLINE( 433)		this->updateStartTimes();
HXLINE( 434)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_fps,return )

bool MovieClip_obj::get_isPlaying(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_442_get_isPlaying)
HXDLIN( 442)		if (this->_hx___playing) {
HXLINE( 443)			if (!(this->_hx___loop)) {
HXLINE( 443)				Float _hx_tmp = this->_hx___currentTime;
HXDLIN( 443)				return (_hx_tmp < this->get_totalTime());
            			}
            			else {
HXLINE( 443)				return true;
            			}
            		}
            		else {
HXLINE( 445)			return false;
            		}
HXLINE( 442)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_isPlaying,return )

bool MovieClip_obj::get_isComplete(){
            	HX_STACKFRAME(&_hx_pos_2dd8d2718d458045_452_get_isComplete)
HXDLIN( 452)		if (!(this->_hx___loop)) {
HXDLIN( 452)			Float _hx_tmp = this->_hx___currentTime;
HXDLIN( 452)			return (_hx_tmp >= this->get_totalTime());
            		}
            		else {
HXDLIN( 452)			return false;
            		}
HXDLIN( 452)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_isComplete,return )


hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__new( ::openfl::_Vector::AbstractVector textures,hx::Null< Float >  __o_fps) {
	hx::ObjectPtr< MovieClip_obj > __this = new MovieClip_obj();
	__this->__construct(textures,__o_fps);
	return __this;
}

hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_Vector::AbstractVector textures,hx::Null< Float >  __o_fps) {
	MovieClip_obj *__this = (MovieClip_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MovieClip_obj), true, "starling.display.MovieClip"));
	*(void **)__this = MovieClip_obj::_hx_vtable;
	__this->__construct(textures,__o_fps);
	return __this;
}

MovieClip_obj::MovieClip_obj()
{
}

void MovieClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClip);
	HX_MARK_MEMBER_NAME(_hx___frames,"__frames");
	HX_MARK_MEMBER_NAME(_hx___defaultFrameDuration,"__defaultFrameDuration");
	HX_MARK_MEMBER_NAME(_hx___currentTime,"__currentTime");
	HX_MARK_MEMBER_NAME(_hx___currentFrameID,"__currentFrameID");
	HX_MARK_MEMBER_NAME(_hx___loop,"__loop");
	HX_MARK_MEMBER_NAME(_hx___playing,"__playing");
	HX_MARK_MEMBER_NAME(_hx___muted,"__muted");
	HX_MARK_MEMBER_NAME(_hx___wasStopped,"__wasStopped");
	HX_MARK_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	 ::starling::display::Image_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___frames,"__frames");
	HX_VISIT_MEMBER_NAME(_hx___defaultFrameDuration,"__defaultFrameDuration");
	HX_VISIT_MEMBER_NAME(_hx___currentTime,"__currentTime");
	HX_VISIT_MEMBER_NAME(_hx___currentFrameID,"__currentFrameID");
	HX_VISIT_MEMBER_NAME(_hx___loop,"__loop");
	HX_VISIT_MEMBER_NAME(_hx___playing,"__playing");
	HX_VISIT_MEMBER_NAME(_hx___muted,"__muted");
	HX_VISIT_MEMBER_NAME(_hx___wasStopped,"__wasStopped");
	HX_VISIT_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	 ::starling::display::Image_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MovieClip_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fps() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loop() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"muted") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_muted() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__loop") ) { return hx::Val( _hx___loop ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__muted") ) { return hx::Val( _hx___muted ); }
		if (HX_FIELD_EQ(inName,"get_fps") ) { return hx::Val( get_fps_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fps") ) { return hx::Val( set_fps_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__frames") ) { return hx::Val( _hx___frames ); }
		if (HX_FIELD_EQ(inName,"addFrame") ) { return hx::Val( addFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_loop") ) { return hx::Val( get_loop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_loop") ) { return hx::Val( set_loop_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__playing") ) { return hx::Val( _hx___playing ); }
		if (HX_FIELD_EQ(inName,"numFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numFrames() ); }
		if (HX_FIELD_EQ(inName,"totalTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_totalTime() ); }
		if (HX_FIELD_EQ(inName,"get_muted") ) { return hx::Val( get_muted_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_muted") ) { return hx::Val( set_muted_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPlaying") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isPlaying() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addFrameAt") ) { return hx::Val( addFrameAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"isComplete") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isComplete() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"advanceTime") ) { return hx::Val( advanceTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentTime() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__wasStopped") ) { return hx::Val( _hx___wasStopped ); }
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentFrame() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__currentTime") ) { return hx::Val( _hx___currentTime ); }
		if (HX_FIELD_EQ(inName,"removeFrameAt") ) { return hx::Val( removeFrameAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFrameSound") ) { return hx::Val( getFrameSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrameSound") ) { return hx::Val( setFrameSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverseFrames") ) { return hx::Val( reverseFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numFrames") ) { return hx::Val( get_numFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_totalTime") ) { return hx::Val( get_totalTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isPlaying") ) { return hx::Val( get_isPlaying_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getFrameAction") ) { return hx::Val( getFrameAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrameAction") ) { return hx::Val( setFrameAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_soundTransform() ); }
		if (HX_FIELD_EQ(inName,"get_isComplete") ) { return hx::Val( get_isComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFrameTexture") ) { return hx::Val( getFrameTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrameTexture") ) { return hx::Val( setFrameTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currentTime") ) { return hx::Val( get_currentTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_currentTime") ) { return hx::Val( set_currentTime_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__currentFrameID") ) { return hx::Val( _hx___currentFrameID ); }
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { return hx::Val( _hx___soundTransform ); }
		if (HX_FIELD_EQ(inName,"getFrameDuration") ) { return hx::Val( getFrameDuration_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrameDuration") ) { return hx::Val( setFrameDuration_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateStartTimes") ) { return hx::Val( updateStartTimes_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currentFrame") ) { return hx::Val( get_currentFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_currentFrame") ) { return hx::Val( set_currentFrame_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_soundTransform") ) { return hx::Val( get_soundTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_soundTransform") ) { return hx::Val( set_soundTransform_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__defaultFrameDuration") ) { return hx::Val( _hx___defaultFrameDuration ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MovieClip_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fps(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_loop(inValue.Cast< bool >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"muted") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_muted(inValue.Cast< bool >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__loop") ) { _hx___loop=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__muted") ) { _hx___muted=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__frames") ) { _hx___frames=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__playing") ) { _hx___playing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currentTime(inValue.Cast< Float >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__wasStopped") ) { _hx___wasStopped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currentFrame(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__currentTime") ) { _hx___currentTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_soundTransform(inValue.Cast<  ::openfl::media::SoundTransform >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__currentFrameID") ) { _hx___currentFrameID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { _hx___soundTransform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__defaultFrameDuration") ) { _hx___defaultFrameDuration=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MovieClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__frames","\xc6","\x1a","\xb5","\x54"));
	outFields->push(HX_HCSTRING("__defaultFrameDuration","\x40","\xae","\x64","\x06"));
	outFields->push(HX_HCSTRING("__currentTime","\xc6","\xe5","\x06","\xce"));
	outFields->push(HX_HCSTRING("__currentFrameID","\x2f","\xdd","\x47","\x8a"));
	outFields->push(HX_HCSTRING("__loop","\x84","\x09","\xb0","\xf6"));
	outFields->push(HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"));
	outFields->push(HX_HCSTRING("__muted","\x4b","\xe8","\xb9","\x7a"));
	outFields->push(HX_HCSTRING("__wasStopped","\x04","\x3b","\x06","\x4b"));
	outFields->push(HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57"));
	outFields->push(HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d"));
	outFields->push(HX_HCSTRING("totalTime","\xf1","\x7d","\xb7","\x69"));
	outFields->push(HX_HCSTRING("currentTime","\xe6","\xa4","\x8e","\x85"));
	outFields->push(HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"));
	outFields->push(HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10"));
	outFields->push(HX_HCSTRING("soundTransform","\x9d","\xee","\xde","\x22"));
	outFields->push(HX_HCSTRING("currentFrame","\x34","\x5d","\x8f","\x4d"));
	outFields->push(HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"));
	outFields->push(HX_HCSTRING("isPlaying","\xa4","\x8c","\x16","\x8e"));
	outFields->push(HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MovieClip_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(MovieClip_obj,_hx___frames),HX_HCSTRING("__frames","\xc6","\x1a","\xb5","\x54")},
	{hx::fsFloat,(int)offsetof(MovieClip_obj,_hx___defaultFrameDuration),HX_HCSTRING("__defaultFrameDuration","\x40","\xae","\x64","\x06")},
	{hx::fsFloat,(int)offsetof(MovieClip_obj,_hx___currentTime),HX_HCSTRING("__currentTime","\xc6","\xe5","\x06","\xce")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___currentFrameID),HX_HCSTRING("__currentFrameID","\x2f","\xdd","\x47","\x8a")},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___loop),HX_HCSTRING("__loop","\x84","\x09","\xb0","\xf6")},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___playing),HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b")},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___muted),HX_HCSTRING("__muted","\x4b","\xe8","\xb9","\x7a")},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___wasStopped),HX_HCSTRING("__wasStopped","\x04","\x3b","\x06","\x4b")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(MovieClip_obj,_hx___soundTransform),HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MovieClip_obj_sStaticStorageInfo = 0;
#endif

static ::String MovieClip_obj_sMemberFields[] = {
	HX_HCSTRING("__frames","\xc6","\x1a","\xb5","\x54"),
	HX_HCSTRING("__defaultFrameDuration","\x40","\xae","\x64","\x06"),
	HX_HCSTRING("__currentTime","\xc6","\xe5","\x06","\xce"),
	HX_HCSTRING("__currentFrameID","\x2f","\xdd","\x47","\x8a"),
	HX_HCSTRING("__loop","\x84","\x09","\xb0","\xf6"),
	HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"),
	HX_HCSTRING("__muted","\x4b","\xe8","\xb9","\x7a"),
	HX_HCSTRING("__wasStopped","\x04","\x3b","\x06","\x4b"),
	HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("addFrame","\x4c","\x9e","\xe0","\x7f"),
	HX_HCSTRING("addFrameAt","\x5f","\x02","\xfe","\xaf"),
	HX_HCSTRING("removeFrameAt","\x9c","\x32","\x2e","\x21"),
	HX_HCSTRING("getFrameTexture","\xe4","\xdd","\x55","\x62"),
	HX_HCSTRING("setFrameTexture","\xf0","\x5a","\x21","\x5e"),
	HX_HCSTRING("getFrameSound","\x98","\x1d","\x65","\xc0"),
	HX_HCSTRING("setFrameSound","\xa4","\xff","\x6a","\x05"),
	HX_HCSTRING("getFrameAction","\xcd","\x5a","\x2c","\x7c"),
	HX_HCSTRING("setFrameAction","\x41","\x43","\x4c","\x9c"),
	HX_HCSTRING("getFrameDuration","\x2b","\x62","\x8b","\x57"),
	HX_HCSTRING("setFrameDuration","\x9f","\x4f","\xcd","\xad"),
	HX_HCSTRING("reverseFrames","\x68","\xe2","\x60","\x2e"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("updateStartTimes","\x6d","\x67","\x38","\x76"),
	HX_HCSTRING("advanceTime","\xaf","\x69","\x9d","\xab"),
	HX_HCSTRING("get_numFrames","\x63","\xce","\xea","\x1e"),
	HX_HCSTRING("get_totalTime","\xc8","\x51","\x1b","\x2b"),
	HX_HCSTRING("get_currentTime","\x7d","\x5c","\x70","\x46"),
	HX_HCSTRING("set_currentTime","\x89","\xd9","\x3b","\x42"),
	HX_HCSTRING("get_loop","\xed","\x61","\x72","\xc7"),
	HX_HCSTRING("set_loop","\x61","\xbb","\xcf","\x75"),
	HX_HCSTRING("get_muted","\xc2","\xeb","\x04","\x54"),
	HX_HCSTRING("set_muted","\xce","\xd7","\x55","\x37"),
	HX_HCSTRING("get_soundTransform","\x66","\xcf","\x78","\xbe"),
	HX_HCSTRING("set_soundTransform","\xda","\x01","\x28","\x9b"),
	HX_HCSTRING("get_currentFrame","\xbd","\x49","\x2e","\x52"),
	HX_HCSTRING("set_currentFrame","\x31","\x37","\x70","\xa8"),
	HX_HCSTRING("get_fps","\x80","\x90","\xc2","\x26"),
	HX_HCSTRING("set_fps","\x8c","\x21","\xc4","\x19"),
	HX_HCSTRING("get_isPlaying","\x7b","\x60","\x7a","\x4f"),
	HX_HCSTRING("get_isComplete","\x0c","\x9b","\x6c","\x70"),
	::String(null()) };

static void MovieClip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieClip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
};

#endif

hx::Class MovieClip_obj::__mClass;

void MovieClip_obj::__register()
{
	hx::Object *dummy = new MovieClip_obj;
	MovieClip_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.MovieClip","\x2e","\xc8","\x1b","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MovieClip_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MovieClip_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MovieClip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieClip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClip_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace display
