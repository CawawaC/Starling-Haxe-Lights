// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Sprite3D
#include <starling/display/Sprite3D.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e66a46f4d21864cf_83_new,"starling.display.Sprite3D","new",0x20614f1a,"starling.display.Sprite3D.new","starling/display/Sprite3D.hx",83,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_97_render,"starling.display.Sprite3D","render",0x6f105cdc,"starling.display.Sprite3D.render","starling/display/Sprite3D.hx",97,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_115_hitTest,"starling.display.Sprite3D","hitTest",0x22abc3ff,"starling.display.Sprite3D.hitTest","starling/display/Sprite3D.hx",115,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_138___onAddedChild,"starling.display.Sprite3D","__onAddedChild",0x3de91961,"starling.display.Sprite3D.__onAddedChild","starling/display/Sprite3D.hx",138,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_143___onRemovedChild,"starling.display.Sprite3D","__onRemovedChild",0x4a2995c1,"starling.display.Sprite3D.__onRemovedChild","starling/display/Sprite3D.hx",143,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_147___recursivelySetIs3D,"starling.display.Sprite3D","__recursivelySetIs3D",0x875cbe44,"starling.display.Sprite3D.__recursivelySetIs3D","starling/display/Sprite3D.hx",147,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_167___updateTransformationMatrices,"starling.display.Sprite3D","__updateTransformationMatrices",0x639abc12,"starling.display.Sprite3D.__updateTransformationMatrices","starling/display/Sprite3D.hx",167,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_180___updateTransformationMatrices3D,"starling.display.Sprite3D","__updateTransformationMatrices3D",0x8ccf9143,"starling.display.Sprite3D.__updateTransformationMatrices3D","starling/display/Sprite3D.hx",180,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_201_set_transformationMatrix,"starling.display.Sprite3D","set_transformationMatrix",0x6c98ceed,"starling.display.Sprite3D.set_transformationMatrix","starling/display/Sprite3D.hx",201,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_212_get_z,"starling.display.Sprite3D","get_z",0xeed6c68b,"starling.display.Sprite3D.get_z","starling/display/Sprite3D.hx",212,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_214_set_z,"starling.display.Sprite3D","set_z",0xd7a5bc97,"starling.display.Sprite3D.set_z","starling/display/Sprite3D.hx",214,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_222_get_pivotZ,"starling.display.Sprite3D","get_pivotZ",0x8a4bbba7,"starling.display.Sprite3D.get_pivotZ","starling/display/Sprite3D.hx",222,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_224_set_pivotZ,"starling.display.Sprite3D","set_pivotZ",0x8dc95a1b,"starling.display.Sprite3D.set_pivotZ","starling/display/Sprite3D.hx",224,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_232_get_scaleZ,"starling.display.Sprite3D","get_scaleZ",0x3b1286df,"starling.display.Sprite3D.get_scaleZ","starling/display/Sprite3D.hx",232,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_234_set_scaleZ,"starling.display.Sprite3D","set_scaleZ",0x3e902553,"starling.display.Sprite3D.set_scaleZ","starling/display/Sprite3D.hx",234,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_243_set_scale,"starling.display.Sprite3D","set_scale",0x8ea15d27,"starling.display.Sprite3D.set_scale","starling/display/Sprite3D.hx",243,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_249_set_skewX,"starling.display.Sprite3D","set_skewX",0x93ee24ab,"starling.display.Sprite3D.set_skewX","starling/display/Sprite3D.hx",249,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_259_set_skewY,"starling.display.Sprite3D","set_skewY",0x93ee24ac,"starling.display.Sprite3D.set_skewY","starling/display/Sprite3D.hx",259,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_269_get_rotationX,"starling.display.Sprite3D","get_rotationX",0xdb04186b,"starling.display.Sprite3D.get_rotationX","starling/display/Sprite3D.hx",269,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_271_set_rotationX,"starling.display.Sprite3D","set_rotationX",0x2009fa77,"starling.display.Sprite3D.set_rotationX","starling/display/Sprite3D.hx",271,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_280_get_rotationY,"starling.display.Sprite3D","get_rotationY",0xdb04186c,"starling.display.Sprite3D.get_rotationY","starling/display/Sprite3D.hx",280,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_282_set_rotationY,"starling.display.Sprite3D","set_rotationY",0x2009fa78,"starling.display.Sprite3D.set_rotationY","starling/display/Sprite3D.hx",282,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_291_get_rotationZ,"starling.display.Sprite3D","get_rotationZ",0xdb04186d,"starling.display.Sprite3D.get_rotationZ","starling/display/Sprite3D.hx",291,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_292_set_rotationZ,"starling.display.Sprite3D","set_rotationZ",0x2009fa79,"starling.display.Sprite3D.set_rotationZ","starling/display/Sprite3D.hx",292,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_299_get_isFlat,"starling.display.Sprite3D","get_isFlat",0x60116d12,"starling.display.Sprite3D.get_isFlat","starling/display/Sprite3D.hx",299,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_68_boot,"starling.display.Sprite3D","boot",0x2cdce838,"starling.display.Sprite3D.boot","starling/display/Sprite3D.hx",68,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_77_boot,"starling.display.Sprite3D","boot",0x2cdce838,"starling.display.Sprite3D.boot","starling/display/Sprite3D.hx",77,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_78_boot,"starling.display.Sprite3D","boot",0x2cdce838,"starling.display.Sprite3D.boot","starling/display/Sprite3D.hx",78,0xae06a3d4)
HX_LOCAL_STACK_FRAME(_hx_pos_e66a46f4d21864cf_79_boot,"starling.display.Sprite3D","boot",0x2cdce838,"starling.display.Sprite3D.boot","starling/display/Sprite3D.hx",79,0xae06a3d4)
namespace starling{
namespace display{

void Sprite3D_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_83_new)
HXLINE(  84)		super::__construct();
HXLINE(  86)		this->_hx___scaleZ = ((Float)1.0);
HXLINE(  87)		this->_hx___rotationX = (this->_hx___rotationY = (this->_hx___pivotZ = (this->_hx___z = ((Float)0.0))));
HXLINE(  88)		this->_hx___setIs3D(true);
HXLINE(  90)		this->addEventListener(HX_("added",c0,d4,43,1c),this->_hx___onAddedChild_dyn());
HXLINE(  91)		this->addEventListener(HX_("removed",a0,1f,00,f3),this->_hx___onRemovedChild_dyn());
            	}

Dynamic Sprite3D_obj::__CreateEmpty() { return new Sprite3D_obj; }

void *Sprite3D_obj::_hx_vtable = 0;

Dynamic Sprite3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sprite3D_obj > _hx_result = new Sprite3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sprite3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2874232c) {
		if (inClassId<=(int)0x25137bc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
		} else {
			return inClassId==(int)0x2874232c;
		}
	} else {
		return inClassId==(int)0x31a4bcfa || inClassId==(int)0x6dea180f;
	}
}

void Sprite3D_obj::render( ::starling::rendering::Painter painter){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_97_render)
HXDLIN(  97)		if (this->get_isFlat()) {
HXDLIN(  97)			this->super::render(painter);
            		}
            		else {
HXLINE( 100)			painter->finishMeshBatch();
HXLINE( 101)			painter->pushState(null());
HXLINE( 102)			 ::starling::rendering::RenderState _hx_tmp = painter->get_state();
HXDLIN( 102)			_hx_tmp->transformModelviewMatrix3D(this->get_transformationMatrix3D());
HXLINE( 104)			this->super::render(painter);
HXLINE( 106)			painter->finishMeshBatch();
HXLINE( 107)			painter->excludeFromCache(hx::ObjectPtr<OBJ_>(this));
HXLINE( 108)			painter->popState(null());
            		}
            	}


 ::starling::display::DisplayObject Sprite3D_obj::hitTest( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_115_hitTest)
HXDLIN( 115)		if (this->get_isFlat()) {
HXDLIN( 115)			return this->super::hitTest(localPoint);
            		}
            		else {
HXLINE( 118)			bool _hx_tmp;
HXDLIN( 118)			if (!(!(this->get_visible()))) {
HXLINE( 118)				_hx_tmp = !(this->get_touchable());
            			}
            			else {
HXLINE( 118)				_hx_tmp = true;
            			}
HXDLIN( 118)			if (_hx_tmp) {
HXLINE( 118)				return null();
            			}
HXLINE( 123)			 ::openfl::geom::Matrix3D _hx_tmp1 = ::starling::display::Sprite3D_obj::sHelperMatrix;
HXDLIN( 123)			_hx_tmp1->copyFrom(this->get_transformationMatrix3D());
HXLINE( 124)			::starling::display::Sprite3D_obj::sHelperMatrix->invert();
HXLINE( 126)			this->get_stage()->getCameraPosition(hx::ObjectPtr<OBJ_>(this),::starling::display::Sprite3D_obj::sHelperPoint);
HXLINE( 127)			::starling::utils::MatrixUtil_obj::transformCoords3D(::starling::display::Sprite3D_obj::sHelperMatrix,localPoint->x,localPoint->y,(int)0,::starling::display::Sprite3D_obj::sHelperPointAlt);
HXLINE( 128)			::starling::utils::MathUtil_obj::intersectLineWithXYPlane(::starling::display::Sprite3D_obj::sHelperPoint,::starling::display::Sprite3D_obj::sHelperPointAlt,localPoint);
HXLINE( 130)			return this->super::hitTest(localPoint);
            		}
HXLINE( 115)		return null();
            	}


void Sprite3D_obj::_hx___onAddedChild( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_138___onAddedChild)
HXDLIN( 138)		this->_hx___recursivelySetIs3D(hx::TCast<  ::starling::display::DisplayObject >::cast(event->target),true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,_hx___onAddedChild,(void))

void Sprite3D_obj::_hx___onRemovedChild( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_143___onRemovedChild)
HXDLIN( 143)		this->_hx___recursivelySetIs3D(hx::TCast<  ::starling::display::DisplayObject >::cast(event->target),false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,_hx___onRemovedChild,(void))

void Sprite3D_obj::_hx___recursivelySetIs3D( ::starling::display::DisplayObject object,bool value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_147___recursivelySetIs3D)
HXLINE( 148)		if (::Std_obj::is(object,hx::ClassOf< ::starling::display::Sprite3D >())) {
HXLINE( 149)			return;
            		}
HXLINE( 151)		if (::Std_obj::is(object,hx::ClassOf< ::starling::display::DisplayObjectContainer >())) {
HXLINE( 153)			 ::starling::display::DisplayObjectContainer container = ( ( ::starling::display::DisplayObjectContainer)(object) );
HXLINE( 154)			int numChildren = container->get_numChildren();
HXLINE( 156)			{
HXLINE( 156)				int _g1 = (int)0;
HXDLIN( 156)				int _g = numChildren;
HXDLIN( 156)				while((_g1 < _g)){
HXLINE( 156)					_g1 = (_g1 + (int)1);
HXDLIN( 156)					int i = (_g1 - (int)1);
HXLINE( 157)					this->_hx___recursivelySetIs3D(container->getChildAt(i),value);
            				}
            			}
            		}
HXLINE( 160)		object->_hx___setIs3D(value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Sprite3D_obj,_hx___recursivelySetIs3D,(void))

void Sprite3D_obj::_hx___updateTransformationMatrices(Float x,Float y,Float pivotX,Float pivotY,Float scaleX,Float scaleY,Float skewX,Float skewY,Float rotation, ::openfl::geom::Matrix out, ::openfl::geom::Matrix3D out3D){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_167___updateTransformationMatrices)
HXDLIN( 167)		if (this->get_isFlat()) {
HXDLIN( 167)			this->super::_hx___updateTransformationMatrices(x,y,pivotX,pivotY,scaleX,scaleY,skewX,skewY,rotation,out,out3D);
            		}
            		else {
HXLINE( 169)			this->_hx___updateTransformationMatrices3D(x,y,this->_hx___z,pivotX,pivotY,this->_hx___pivotZ,scaleX,scaleY,this->_hx___scaleZ,this->_hx___rotationX,this->_hx___rotationY,rotation,out,out3D);
            		}
            	}


void Sprite3D_obj::_hx___updateTransformationMatrices3D(Float x,Float y,Float z,Float pivotX,Float pivotY,Float pivotZ,Float scaleX,Float scaleY,Float scaleZ,Float rotationX,Float rotationY,Float rotationZ, ::openfl::geom::Matrix out, ::openfl::geom::Matrix3D out3D){
            	HX_GC_STACKFRAME(&_hx_pos_e66a46f4d21864cf_180___updateTransformationMatrices3D)
HXLINE( 181)		out->identity();
HXLINE( 182)		out3D->identity();
HXLINE( 184)		bool _hx_tmp;
HXDLIN( 184)		bool _hx_tmp1;
HXDLIN( 184)		if ((scaleX == ((Float)1.0))) {
HXLINE( 184)			_hx_tmp1 = (scaleY != ((Float)1.0));
            		}
            		else {
HXLINE( 184)			_hx_tmp1 = true;
            		}
HXDLIN( 184)		if (!(_hx_tmp1)) {
HXLINE( 184)			_hx_tmp = (scaleZ != ((Float)1.0));
            		}
            		else {
HXLINE( 184)			_hx_tmp = true;
            		}
HXDLIN( 184)		if (_hx_tmp) {
HXLINE( 185)			Float _hx_tmp2;
HXDLIN( 185)			if ((scaleX != (int)0)) {
HXLINE( 185)				_hx_tmp2 = scaleX;
            			}
            			else {
HXLINE( 185)				_hx_tmp2 = ((Float)0.00001);
            			}
HXDLIN( 185)			Float _hx_tmp3;
HXDLIN( 185)			if ((scaleY != (int)0)) {
HXLINE( 185)				_hx_tmp3 = scaleY;
            			}
            			else {
HXLINE( 185)				_hx_tmp3 = ((Float)0.00001);
            			}
HXDLIN( 185)			Float _hx_tmp4;
HXDLIN( 185)			if ((scaleZ != (int)0)) {
HXLINE( 185)				_hx_tmp4 = scaleZ;
            			}
            			else {
HXLINE( 185)				_hx_tmp4 = ((Float)0.00001);
            			}
HXDLIN( 185)			out3D->appendScale(_hx_tmp2,_hx_tmp3,_hx_tmp4);
            		}
HXLINE( 186)		if ((rotationX != ((Float)0.0))) {
HXLINE( 187)			Float _hx_tmp5 = ::starling::utils::MathUtil_obj::rad2deg(rotationX);
HXDLIN( 187)			out3D->appendRotation(_hx_tmp5, ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null()),null());
            		}
HXLINE( 188)		if ((rotationY != ((Float)0.0))) {
HXLINE( 189)			Float _hx_tmp6 = ::starling::utils::MathUtil_obj::rad2deg(rotationY);
HXDLIN( 189)			out3D->appendRotation(_hx_tmp6, ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,null()),null());
            		}
HXLINE( 190)		if ((rotationZ != ((Float)0.0))) {
HXLINE( 191)			Float _hx_tmp7 = ::starling::utils::MathUtil_obj::rad2deg(rotationZ);
HXDLIN( 191)			out3D->appendRotation(_hx_tmp7, ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)1,null()),null());
            		}
HXLINE( 192)		bool _hx_tmp8;
HXDLIN( 192)		bool _hx_tmp9;
HXDLIN( 192)		if ((x == ((Float)0.0))) {
HXLINE( 192)			_hx_tmp9 = (y != ((Float)0.0));
            		}
            		else {
HXLINE( 192)			_hx_tmp9 = true;
            		}
HXDLIN( 192)		if (!(_hx_tmp9)) {
HXLINE( 192)			_hx_tmp8 = (z != ((Float)0.0));
            		}
            		else {
HXLINE( 192)			_hx_tmp8 = true;
            		}
HXDLIN( 192)		if (_hx_tmp8) {
HXLINE( 193)			out3D->appendTranslation(x,y,z);
            		}
HXLINE( 194)		bool _hx_tmp10;
HXDLIN( 194)		bool _hx_tmp11;
HXDLIN( 194)		if ((pivotX == ((Float)0.0))) {
HXLINE( 194)			_hx_tmp11 = (pivotY != ((Float)0.0));
            		}
            		else {
HXLINE( 194)			_hx_tmp11 = true;
            		}
HXDLIN( 194)		if (!(_hx_tmp11)) {
HXLINE( 194)			_hx_tmp10 = (pivotZ != ((Float)0.0));
            		}
            		else {
HXLINE( 194)			_hx_tmp10 = true;
            		}
HXDLIN( 194)		if (_hx_tmp10) {
HXLINE( 195)			out3D->prependTranslation(-(pivotX),-(pivotY),-(pivotZ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC14(Sprite3D_obj,_hx___updateTransformationMatrices3D,(void))

 ::openfl::geom::Matrix Sprite3D_obj::set_transformationMatrix( ::openfl::geom::Matrix value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_201_set_transformationMatrix)
HXLINE( 202)		this->super::set_transformationMatrix(value);
HXLINE( 203)		this->_hx___rotationX = (this->_hx___rotationY = (this->_hx___pivotZ = (this->_hx___z = (int)0)));
HXLINE( 204)		this->_hx___setTransformationChanged();
HXLINE( 205)		return value;
            	}


Float Sprite3D_obj::get_z(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_212_get_z)
HXDLIN( 212)		return this->_hx___z;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite3D_obj,get_z,return )

Float Sprite3D_obj::set_z(Float value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_214_set_z)
HXLINE( 215)		this->_hx___z = value;
HXLINE( 216)		this->_hx___setTransformationChanged();
HXLINE( 217)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,set_z,return )

Float Sprite3D_obj::get_pivotZ(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_222_get_pivotZ)
HXDLIN( 222)		return this->_hx___pivotZ;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite3D_obj,get_pivotZ,return )

Float Sprite3D_obj::set_pivotZ(Float value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_224_set_pivotZ)
HXLINE( 225)		this->_hx___pivotZ = value;
HXLINE( 226)		this->_hx___setTransformationChanged();
HXLINE( 227)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,set_pivotZ,return )

Float Sprite3D_obj::get_scaleZ(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_232_get_scaleZ)
HXDLIN( 232)		return this->_hx___scaleZ;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite3D_obj,get_scaleZ,return )

Float Sprite3D_obj::set_scaleZ(Float value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_234_set_scaleZ)
HXLINE( 235)		this->_hx___scaleZ = value;
HXLINE( 236)		this->_hx___setTransformationChanged();
HXLINE( 237)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,set_scaleZ,return )

Float Sprite3D_obj::set_scale(Float value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_243_set_scale)
HXDLIN( 243)		return this->set_scaleX(this->set_scaleY(this->set_scaleZ(value)));
            	}


Float Sprite3D_obj::set_skewX(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_e66a46f4d21864cf_249_set_skewX)
HXDLIN( 249)		HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("3D objects do not support skewing",40,6b,2e,67),null()));
HXDLIN( 249)		return ((Float)0.);
            	}


Float Sprite3D_obj::set_skewY(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_e66a46f4d21864cf_259_set_skewY)
HXDLIN( 259)		HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("3D objects do not support skewing",40,6b,2e,67),null()));
HXDLIN( 259)		return ((Float)0.);
            	}


Float Sprite3D_obj::get_rotationX(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_269_get_rotationX)
HXDLIN( 269)		return this->_hx___rotationX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite3D_obj,get_rotationX,return )

Float Sprite3D_obj::set_rotationX(Float value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_271_set_rotationX)
HXLINE( 272)		this->_hx___rotationX = ::starling::utils::MathUtil_obj::normalizeAngle(value);
HXLINE( 273)		this->_hx___setTransformationChanged();
HXLINE( 274)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,set_rotationX,return )

Float Sprite3D_obj::get_rotationY(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_280_get_rotationY)
HXDLIN( 280)		return this->_hx___rotationY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite3D_obj,get_rotationY,return )

Float Sprite3D_obj::set_rotationY(Float value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_282_set_rotationY)
HXLINE( 283)		this->_hx___rotationY = ::starling::utils::MathUtil_obj::normalizeAngle(value);
HXLINE( 284)		this->_hx___setTransformationChanged();
HXLINE( 285)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,set_rotationY,return )

Float Sprite3D_obj::get_rotationZ(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_291_get_rotationZ)
HXDLIN( 291)		return this->get_rotation();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite3D_obj,get_rotationZ,return )

Float Sprite3D_obj::set_rotationZ(Float value){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_292_set_rotationZ)
HXDLIN( 292)		return this->set_rotation(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sprite3D_obj,set_rotationZ,return )

bool Sprite3D_obj::get_isFlat(){
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_299_get_isFlat)
HXDLIN( 299)		bool _hx_tmp;
HXDLIN( 299)		bool _hx_tmp1;
HXDLIN( 299)		bool _hx_tmp2;
HXDLIN( 299)		bool _hx_tmp3;
HXDLIN( 299)		bool _hx_tmp4;
HXDLIN( 299)		bool _hx_tmp5;
HXDLIN( 299)		if ((this->_hx___z > ((Float)-1e-005))) {
HXDLIN( 299)			_hx_tmp5 = (this->_hx___z < ((Float)0.00001));
            		}
            		else {
HXDLIN( 299)			_hx_tmp5 = false;
            		}
HXDLIN( 299)		if (_hx_tmp5) {
HXDLIN( 299)			_hx_tmp4 = (this->_hx___rotationX > ((Float)-1e-005));
            		}
            		else {
HXDLIN( 299)			_hx_tmp4 = false;
            		}
HXDLIN( 299)		if (_hx_tmp4) {
HXDLIN( 299)			_hx_tmp3 = (this->_hx___rotationX < ((Float)0.00001));
            		}
            		else {
HXDLIN( 299)			_hx_tmp3 = false;
            		}
HXDLIN( 299)		if (_hx_tmp3) {
HXDLIN( 299)			_hx_tmp2 = (this->_hx___rotationY > ((Float)-1e-005));
            		}
            		else {
HXDLIN( 299)			_hx_tmp2 = false;
            		}
HXDLIN( 299)		if (_hx_tmp2) {
HXDLIN( 299)			_hx_tmp1 = (this->_hx___rotationY < ((Float)0.00001));
            		}
            		else {
HXDLIN( 299)			_hx_tmp1 = false;
            		}
HXDLIN( 299)		if (_hx_tmp1) {
HXDLIN( 299)			_hx_tmp = (this->_hx___pivotZ > ((Float)-1e-005));
            		}
            		else {
HXDLIN( 299)			_hx_tmp = false;
            		}
HXDLIN( 299)		if (_hx_tmp) {
HXLINE( 302)			return (this->_hx___pivotZ < ((Float)0.00001));
            		}
            		else {
HXDLIN( 299)			return false;
            		}
HXDLIN( 299)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite3D_obj,get_isFlat,return )

Float Sprite3D_obj::E;

 ::openfl::geom::Vector3D Sprite3D_obj::sHelperPoint;

 ::openfl::geom::Vector3D Sprite3D_obj::sHelperPointAlt;

 ::openfl::geom::Matrix3D Sprite3D_obj::sHelperMatrix;


hx::ObjectPtr< Sprite3D_obj > Sprite3D_obj::__new() {
	hx::ObjectPtr< Sprite3D_obj > __this = new Sprite3D_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Sprite3D_obj > Sprite3D_obj::__alloc(hx::Ctx *_hx_ctx) {
	Sprite3D_obj *__this = (Sprite3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Sprite3D_obj), true, "starling.display.Sprite3D"));
	*(void **)__this = Sprite3D_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Sprite3D_obj::Sprite3D_obj()
{
}

hx::Val Sprite3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_z() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"__z") ) { return hx::Val( _hx___z ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_z") ) { return hx::Val( get_z_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_z") ) { return hx::Val( set_z_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"pivotZ") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pivotZ() ); }
		if (HX_FIELD_EQ(inName,"scaleZ") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleZ() ); }
		if (HX_FIELD_EQ(inName,"isFlat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isFlat() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__scaleZ") ) { return hx::Val( _hx___scaleZ ); }
		if (HX_FIELD_EQ(inName,"__pivotZ") ) { return hx::Val( _hx___pivotZ ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skewX") ) { return hx::Val( set_skewX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skewY") ) { return hx::Val( set_skewY_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotationX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotationX() ); }
		if (HX_FIELD_EQ(inName,"rotationY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotationY() ); }
		if (HX_FIELD_EQ(inName,"rotationZ") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotationZ() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_pivotZ") ) { return hx::Val( get_pivotZ_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pivotZ") ) { return hx::Val( set_pivotZ_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleZ") ) { return hx::Val( get_scaleZ_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleZ") ) { return hx::Val( set_scaleZ_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isFlat") ) { return hx::Val( get_isFlat_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__rotationX") ) { return hx::Val( _hx___rotationX ); }
		if (HX_FIELD_EQ(inName,"__rotationY") ) { return hx::Val( _hx___rotationY ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_rotationX") ) { return hx::Val( get_rotationX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotationX") ) { return hx::Val( set_rotationX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotationY") ) { return hx::Val( get_rotationY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotationY") ) { return hx::Val( set_rotationY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotationZ") ) { return hx::Val( get_rotationZ_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotationZ") ) { return hx::Val( set_rotationZ_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__onAddedChild") ) { return hx::Val( _hx___onAddedChild_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__onRemovedChild") ) { return hx::Val( _hx___onRemovedChild_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__recursivelySetIs3D") ) { return hx::Val( _hx___recursivelySetIs3D_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"set_transformationMatrix") ) { return hx::Val( set_transformationMatrix_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__updateTransformationMatrices") ) { return hx::Val( _hx___updateTransformationMatrices_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__updateTransformationMatrices3D") ) { return hx::Val( _hx___updateTransformationMatrices3D_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Sprite3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { outValue = ( sHelperPoint ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { outValue = ( sHelperMatrix ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sHelperPointAlt") ) { outValue = ( sHelperPointAlt ); return true; }
	}
	return false;
}

hx::Val Sprite3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_z(inValue.Cast< Float >()) ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"__z") ) { _hx___z=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pivotZ") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pivotZ(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleZ") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleZ(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__scaleZ") ) { _hx___scaleZ=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pivotZ") ) { _hx___pivotZ=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rotationX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotationX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"rotationY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotationY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"rotationZ") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotationZ(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__rotationX") ) { _hx___rotationX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationY") ) { _hx___rotationY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Sprite3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { sHelperPoint=ioValue.Cast<  ::openfl::geom::Vector3D >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { sHelperMatrix=ioValue.Cast<  ::openfl::geom::Matrix3D >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sHelperPointAlt") ) { sHelperPointAlt=ioValue.Cast<  ::openfl::geom::Vector3D >(); return true; }
	}
	return false;
}

void Sprite3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__rotationX","\x3a","\xa2","\x1b","\x9b"));
	outFields->push(HX_HCSTRING("__rotationY","\x3b","\xa2","\x1b","\x9b"));
	outFields->push(HX_HCSTRING("__scaleZ","\xb0","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__pivotZ","\x78","\x8a","\x8e","\x33"));
	outFields->push(HX_HCSTRING("__z","\x5a","\x69","\x48","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("pivotZ","\x58","\x1f","\x5f","\x8b"));
	outFields->push(HX_HCSTRING("scaleZ","\x90","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("rotationX","\x5a","\x59","\xef","\x6c"));
	outFields->push(HX_HCSTRING("rotationY","\x5b","\x59","\xef","\x6c"));
	outFields->push(HX_HCSTRING("rotationZ","\x5c","\x59","\xef","\x6c"));
	outFields->push(HX_HCSTRING("isFlat","\xc3","\xd0","\x24","\x61"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sprite3D_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Sprite3D_obj,_hx___rotationX),HX_HCSTRING("__rotationX","\x3a","\xa2","\x1b","\x9b")},
	{hx::fsFloat,(int)offsetof(Sprite3D_obj,_hx___rotationY),HX_HCSTRING("__rotationY","\x3b","\xa2","\x1b","\x9b")},
	{hx::fsFloat,(int)offsetof(Sprite3D_obj,_hx___scaleZ),HX_HCSTRING("__scaleZ","\xb0","\x55","\x55","\xe4")},
	{hx::fsFloat,(int)offsetof(Sprite3D_obj,_hx___pivotZ),HX_HCSTRING("__pivotZ","\x78","\x8a","\x8e","\x33")},
	{hx::fsFloat,(int)offsetof(Sprite3D_obj,_hx___z),HX_HCSTRING("__z","\x5a","\x69","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Sprite3D_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Sprite3D_obj::E,HX_HCSTRING("E","\x45","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(void *) &Sprite3D_obj::sHelperPoint,HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(void *) &Sprite3D_obj::sHelperPointAlt,HX_HCSTRING("sHelperPointAlt","\x1a","\x3e","\xaa","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(void *) &Sprite3D_obj::sHelperMatrix,HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Sprite3D_obj_sMemberFields[] = {
	HX_HCSTRING("__rotationX","\x3a","\xa2","\x1b","\x9b"),
	HX_HCSTRING("__rotationY","\x3b","\xa2","\x1b","\x9b"),
	HX_HCSTRING("__scaleZ","\xb0","\x55","\x55","\xe4"),
	HX_HCSTRING("__pivotZ","\x78","\x8a","\x8e","\x33"),
	HX_HCSTRING("__z","\x5a","\x69","\x48","\x00"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("__onAddedChild","\xdb","\x31","\xcc","\xcf"),
	HX_HCSTRING("__onRemovedChild","\xbb","\x40","\x5f","\x6d"),
	HX_HCSTRING("__recursivelySetIs3D","\x3e","\x6e","\xdc","\xf9"),
	HX_HCSTRING("__updateTransformationMatrices","\x8c","\xe8","\x5f","\x6f"),
	HX_HCSTRING("__updateTransformationMatrices3D","\x3d","\x50","\x94","\xf5"),
	HX_HCSTRING("set_transformationMatrix","\xe7","\x03","\x49","\x9c"),
	HX_HCSTRING("get_z","\x51","\xa5","\x60","\x91"),
	HX_HCSTRING("set_z","\x5d","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_pivotZ","\x21","\x8f","\xe6","\x7b"),
	HX_HCSTRING("set_pivotZ","\x95","\x2d","\x64","\x7f"),
	HX_HCSTRING("get_scaleZ","\x59","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleZ","\xcd","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	HX_HCSTRING("set_skewX","\x71","\xde","\x15","\xa5"),
	HX_HCSTRING("set_skewY","\x72","\xde","\x15","\xa5"),
	HX_HCSTRING("get_rotationX","\x31","\x2d","\x53","\x2e"),
	HX_HCSTRING("set_rotationX","\x3d","\x0f","\x59","\x73"),
	HX_HCSTRING("get_rotationY","\x32","\x2d","\x53","\x2e"),
	HX_HCSTRING("set_rotationY","\x3e","\x0f","\x59","\x73"),
	HX_HCSTRING("get_rotationZ","\x33","\x2d","\x53","\x2e"),
	HX_HCSTRING("set_rotationZ","\x3f","\x0f","\x59","\x73"),
	HX_HCSTRING("get_isFlat","\x8c","\x40","\xac","\x51"),
	::String(null()) };

static void Sprite3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sprite3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Sprite3D_obj::E,"E");
	HX_MARK_MEMBER_NAME(Sprite3D_obj::sHelperPoint,"sHelperPoint");
	HX_MARK_MEMBER_NAME(Sprite3D_obj::sHelperPointAlt,"sHelperPointAlt");
	HX_MARK_MEMBER_NAME(Sprite3D_obj::sHelperMatrix,"sHelperMatrix");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sprite3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sprite3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Sprite3D_obj::E,"E");
	HX_VISIT_MEMBER_NAME(Sprite3D_obj::sHelperPoint,"sHelperPoint");
	HX_VISIT_MEMBER_NAME(Sprite3D_obj::sHelperPointAlt,"sHelperPointAlt");
	HX_VISIT_MEMBER_NAME(Sprite3D_obj::sHelperMatrix,"sHelperMatrix");
};

#endif

hx::Class Sprite3D_obj::__mClass;

static ::String Sprite3D_obj_sStaticFields[] = {
	HX_HCSTRING("E","\x45","\x00","\x00","\x00"),
	HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff"),
	HX_HCSTRING("sHelperPointAlt","\x1a","\x3e","\xaa","\xa3"),
	HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19"),
	::String(null())
};

void Sprite3D_obj::__register()
{
	hx::Object *dummy = new Sprite3D_obj;
	Sprite3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.Sprite3D","\x28","\x7a","\x59","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Sprite3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Sprite3D_obj::__SetStatic;
	__mClass->mMarkFunc = Sprite3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Sprite3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sprite3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sprite3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sprite3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sprite3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sprite3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Sprite3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e66a46f4d21864cf_68_boot)
HXDLIN(  68)		E = ((Float)0.00001);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e66a46f4d21864cf_77_boot)
HXDLIN(  77)		sHelperPoint =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e66a46f4d21864cf_78_boot)
HXDLIN(  78)		sHelperPointAlt =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e66a46f4d21864cf_79_boot)
HXDLIN(  79)		sHelperMatrix =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            	}
}

} // end namespace starling
} // end namespace display
