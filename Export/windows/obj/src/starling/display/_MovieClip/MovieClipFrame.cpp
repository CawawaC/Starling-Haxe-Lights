// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MovieClip
#include <starling/display/MovieClip.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display__MovieClip_MovieClipFrame
#include <starling/display/_MovieClip/MovieClipFrame.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dfc7c515c9ea0ac5_460_new,"starling.display._MovieClip.MovieClipFrame","new",0x815fc3ba,"starling.display._MovieClip.MovieClipFrame.new","starling/display/MovieClip.hx",460,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_dfc7c515c9ea0ac5_474_playSound,"starling.display._MovieClip.MovieClipFrame","playSound",0x7b40ad15,"starling.display._MovieClip.MovieClipFrame.playSound","starling/display/MovieClip.hx",474,0xf1682f52)
HX_LOCAL_STACK_FRAME(_hx_pos_dfc7c515c9ea0ac5_479_executeAction,"starling.display._MovieClip.MovieClipFrame","executeAction",0x5c0837a5,"starling.display._MovieClip.MovieClipFrame.executeAction","starling/display/MovieClip.hx",479,0xf1682f52)
namespace starling{
namespace display{
namespace _MovieClip{

void MovieClipFrame_obj::__construct( ::starling::textures::Texture texture,hx::Null< Float >  __o_duration,hx::Null< Float >  __o_startTime){
Float duration = __o_duration.Default(((Float)0.1));
Float startTime = __o_startTime.Default(0);
            	HX_STACKFRAME(&_hx_pos_dfc7c515c9ea0ac5_460_new)
HXLINE( 461)		this->texture = texture;
HXLINE( 462)		this->duration = duration;
HXLINE( 463)		this->startTime = startTime;
            	}

Dynamic MovieClipFrame_obj::__CreateEmpty() { return new MovieClipFrame_obj; }

void *MovieClipFrame_obj::_hx_vtable = 0;

Dynamic MovieClipFrame_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MovieClipFrame_obj > _hx_result = new MovieClipFrame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MovieClipFrame_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x31583924;
}

void MovieClipFrame_obj::playSound( ::openfl::media::SoundTransform transform){
            	HX_STACKFRAME(&_hx_pos_dfc7c515c9ea0ac5_474_playSound)
HXDLIN( 474)		if (hx::IsNotNull( this->sound )) {
HXDLIN( 474)			this->sound->play((int)0,(int)0,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClipFrame_obj,playSound,(void))

void MovieClipFrame_obj::executeAction( ::starling::display::MovieClip movie,int frameID){
            	HX_GC_STACKFRAME(&_hx_pos_dfc7c515c9ea0ac5_479_executeAction)
HXDLIN( 479)		if (hx::IsNotNull( this->action )) {
HXLINE( 486)			int numArgs = ( (int)(this->action->__ArgCount()) );
HXLINE( 491)			if ((numArgs == (int)0)) {
HXLINE( 491)				this->action();
            			}
            			else {
HXLINE( 492)				if ((numArgs == (int)1)) {
HXLINE( 492)					this->action(movie);
            				}
            				else {
HXLINE( 493)					if ((numArgs == (int)2)) {
HXLINE( 493)						this->action(movie,frameID);
            					}
            					else {
HXLINE( 494)						HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Frame actions support zero, one or two parameters: ",24,22,7f,64) + HX_("movie:MovieClip, frameID:int",d3,03,b0,1b)),null()));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClipFrame_obj,executeAction,(void))


hx::ObjectPtr< MovieClipFrame_obj > MovieClipFrame_obj::__new( ::starling::textures::Texture texture,hx::Null< Float >  __o_duration,hx::Null< Float >  __o_startTime) {
	hx::ObjectPtr< MovieClipFrame_obj > __this = new MovieClipFrame_obj();
	__this->__construct(texture,__o_duration,__o_startTime);
	return __this;
}

hx::ObjectPtr< MovieClipFrame_obj > MovieClipFrame_obj::__alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture texture,hx::Null< Float >  __o_duration,hx::Null< Float >  __o_startTime) {
	MovieClipFrame_obj *__this = (MovieClipFrame_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MovieClipFrame_obj), true, "starling.display._MovieClip.MovieClipFrame"));
	*(void **)__this = MovieClipFrame_obj::_hx_vtable;
	__this->__construct(texture,__o_duration,__o_startTime);
	return __this;
}

MovieClipFrame_obj::MovieClipFrame_obj()
{
}

void MovieClipFrame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClipFrame);
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(sound,"sound");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(action,"action");
	HX_MARK_END_CLASS();
}

void MovieClipFrame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(sound,"sound");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(action,"action");
}

hx::Val MovieClipFrame_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { return hx::Val( sound ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"action") ) { return hx::Val( action ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { return hx::Val( startTime ); }
		if (HX_FIELD_EQ(inName,"playSound") ) { return hx::Val( playSound_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"executeAction") ) { return hx::Val( executeAction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MovieClipFrame_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { sound=inValue.Cast<  ::openfl::media::Sound >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"action") ) { action=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MovieClipFrame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"));
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	outFields->push(HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"));
	outFields->push(HX_HCSTRING("action","\xb6","\x3b","\x46","\x16"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MovieClipFrame_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(MovieClipFrame_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(int)offsetof(MovieClipFrame_obj,sound),HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80")},
	{hx::fsFloat,(int)offsetof(MovieClipFrame_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{hx::fsFloat,(int)offsetof(MovieClipFrame_obj,startTime),HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(MovieClipFrame_obj,action),HX_HCSTRING("action","\xb6","\x3b","\x46","\x16")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MovieClipFrame_obj_sStaticStorageInfo = 0;
#endif

static ::String MovieClipFrame_obj_sMemberFields[] = {
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"),
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"),
	HX_HCSTRING("action","\xb6","\x3b","\x46","\x16"),
	HX_HCSTRING("playSound","\x3b","\xba","\xb0","\xa1"),
	HX_HCSTRING("executeAction","\xcb","\xcf","\x3c","\x91"),
	::String(null()) };

static void MovieClipFrame_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieClipFrame_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieClipFrame_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieClipFrame_obj::__mClass,"__mClass");
};

#endif

hx::Class MovieClipFrame_obj::__mClass;

void MovieClipFrame_obj::__register()
{
	hx::Object *dummy = new MovieClipFrame_obj;
	MovieClipFrame_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display._MovieClip.MovieClipFrame","\xc8","\x1e","\x99","\x74");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MovieClipFrame_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MovieClipFrame_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MovieClipFrame_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieClipFrame_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClipFrame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClipFrame_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace display
} // end namespace _MovieClip
