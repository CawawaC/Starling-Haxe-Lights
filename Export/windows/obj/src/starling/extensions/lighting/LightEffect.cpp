// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_Light
#include <starling/extensions/lighting/Light.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_LightEffect
#include <starling/extensions/lighting/LightEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_MeshEffect
#include <starling/rendering/MeshEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_Program
#include <starling/rendering/Program.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#include <starling/rendering/VertexDataFormat.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_RenderUtil
#include <starling/utils/RenderUtil.h>
#endif
#ifndef INCLUDED_starling_utils_StringUtil
#include <starling/utils/StringUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_46_new,"starling.extensions.lighting.LightEffect","new",0x00a39aab,"starling.extensions.lighting.LightEffect.new","starling/extensions/lighting/LightEffect.hx",46,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_138_createProgram,"starling.extensions.lighting.LightEffect","createProgram",0x3715d8f3,"starling.extensions.lighting.LightEffect.createProgram","starling/extensions/lighting/LightEffect.hx",138,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_53_createProgram,"starling.extensions.lighting.LightEffect","createProgram",0x3715d8f3,"starling.extensions.lighting.LightEffect.createProgram","starling/extensions/lighting/LightEffect.hx",53,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_264_beforeDraw,"starling.extensions.lighting.LightEffect","beforeDraw",0x587e3d38,"starling.extensions.lighting.LightEffect.beforeDraw","starling/extensions/lighting/LightEffect.hx",264,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_331_afterDraw,"starling.extensions.lighting.LightEffect","afterDraw",0x865c10cb,"starling.extensions.lighting.LightEffect.afterDraw","starling/extensions/lighting/LightEffect.hx",331,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_343_get_programVariantName,"starling.extensions.lighting.LightEffect","get_programVariantName",0xa06b432a,"starling.extensions.lighting.LightEffect.get_programVariantName","starling/extensions/lighting/LightEffect.hx",343,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_370_get_vertexFormat,"starling.extensions.lighting.LightEffect","get_vertexFormat",0x2923d119,"starling.extensions.lighting.LightEffect.get_vertexFormat","starling/extensions/lighting/LightEffect.hx",370,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_375_get_numLights,"starling.extensions.lighting.LightEffect","get_numLights",0xb540ffa5,"starling.extensions.lighting.LightEffect.get_numLights","starling/extensions/lighting/LightEffect.hx",375,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_378_set_numLights,"starling.extensions.lighting.LightEffect","set_numLights",0xfa46e1b1,"starling.extensions.lighting.LightEffect.set_numLights","starling/extensions/lighting/LightEffect.hx",378,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_392_setLightAt,"starling.extensions.lighting.LightEffect","setLightAt",0x342734fc,"starling.extensions.lighting.LightEffect.setLightAt","starling/extensions/lighting/LightEffect.hx",392,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_409_get_cameraPosition,"starling.extensions.lighting.LightEffect","get_cameraPosition",0x6840b34c,"starling.extensions.lighting.LightEffect.get_cameraPosition","starling/extensions/lighting/LightEffect.hx",409,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_412_set_cameraPosition,"starling.extensions.lighting.LightEffect","set_cameraPosition",0x44efe5c0,"starling.extensions.lighting.LightEffect.set_cameraPosition","starling/extensions/lighting/LightEffect.hx",412,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_419_get_normalTexture,"starling.extensions.lighting.LightEffect","get_normalTexture",0xbd2f4456,"starling.extensions.lighting.LightEffect.get_normalTexture","starling/extensions/lighting/LightEffect.hx",419,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_422_set_normalTexture,"starling.extensions.lighting.LightEffect","set_normalTexture",0xe09d1c62,"starling.extensions.lighting.LightEffect.set_normalTexture","starling/extensions/lighting/LightEffect.hx",422,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_35_boot,"starling.extensions.lighting.LightEffect","boot",0x869cbb87,"starling.extensions.lighting.LightEffect.boot","starling/extensions/lighting/LightEffect.hx",35,0xa9a58946)
HX_LOCAL_STACK_FRAME(_hx_pos_243a5e80bd73d0ed_43_boot,"starling.extensions.lighting.LightEffect","boot",0x869cbb87,"starling.extensions.lighting.LightEffect.boot","starling/extensions/lighting/LightEffect.hx",43,0xa9a58946)
namespace starling{
namespace extensions{
namespace lighting{

void LightEffect_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_46_new)
HXLINE(  47)		super::__construct();
HXLINE(  48)		this->_lights = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  49)		this->_cameraPosition =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic LightEffect_obj::__CreateEmpty() { return new LightEffect_obj; }

void *LightEffect_obj::_hx_vtable = 0;

Dynamic LightEffect_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LightEffect_obj > _hx_result = new LightEffect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LightEffect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x224f0137) {
		if (inClassId<=(int)0x15407461) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x15407461;
		} else {
			return inClassId==(int)0x224f0137;
		}
	} else {
		return inClassId==(int)0x2a6d1e35 || inClassId==(int)0x7fe47262;
	}
}

 ::starling::rendering::Program LightEffect_obj::createProgram(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(::String _hx_register){
            			HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_138_createProgram)
HXLINE( 138)			return ::starling::utils::StringUtil_obj::format((HX_("mul {0}.xyz, {0}.xyz, fc0.www \n",6a,80,5d,6b) + HX_("nrm {0}.xyz, {0}.xyz",03,60,93,b6)),::cpp::VirtualArray_obj::__new(1)->init(0,_hx_register));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_53_createProgram)
HXLINE(  54)		::cpp::VirtualArray vertexShader = ::cpp::VirtualArray_obj::__new(19)->init(0,HX_("mov vt0, va4",0f,83,b0,b0))->init(1,HX_("mul vt0.w, vt0.w, vc5.w",f5,54,97,61))->init(2,HX_("m44  op, va0, vc0",6c,a8,de,91))->init(3,HX_("mov  v0, va0     ",1d,0f,68,8e))->init(4,HX_("mov  v1, va1     ",bd,d6,a1,75))->init(5,HX_("mul  v2, va2, vc4",e0,c9,38,1f))->init(6,HX_("mov  v3, va3     ",fd,65,15,44))->init(7,HX_("mov  v4, vt0     ",74,8c,f9,a7))->init(8,HX_("crs vt1.xyz, va5.xyz, va6.xyz",43,d1,9e,31))->init(9,HX_("mul vt1.xyz, vt1.xyz, va7.xxx",da,73,77,c4))->init(10,HX_("mov v5.xw, va5.xw",79,0c,4c,70))->init(11,HX_("mov v6.xw, va5.yw",f7,7a,0b,b2))->init(12,HX_("mov v7.xw, va5.zw",75,e9,ca,f3))->init(13,HX_("mov v5.y, va6.x",ab,05,c6,7f))->init(14,HX_("mov v6.y, va6.y",8b,7d,10,40))->init(15,HX_("mov v7.y, va6.z",6b,f5,5a,00))->init(16,HX_("mov v5.z, vt1.x",52,ba,83,c5))->init(17,HX_("mov v6.z, vt1.y",32,32,ce,85))->init(18,HX_("mov v7.z, vt1.z",12,aa,18,46));
HXLINE(  89)		::cpp::VirtualArray fragmentShader = ::cpp::VirtualArray_obj::__new(2)->init(0,::starling::rendering::FilterEffect_obj::tex(HX_("ft0",22,cb,4d,00),HX_("v1",fb,66,00,00),(int)0,this->get_texture(),null()))->init(1,HX_("mul ft0, ft0, v2",d8,88,de,7f));
HXLINE(  94)		if (hx::IsNotNull( this->_normalTexture )) {
HXLINE(  96)			fragmentShader->push(::starling::rendering::FilterEffect_obj::tex(HX_("ft1",23,cb,4d,00),HX_("v3",fd,66,00,00),(int)1,this->get_normalTexture(),false));
HXLINE(  99)			fragmentShader->push(HX_("mul ft1.xy, ft1.xy, fc0.zz",57,e6,57,55));
HXLINE( 102)			fragmentShader->push(HX_("sub ft1.xy, ft1.xy, fc0.yy",7b,87,c1,ca));
HXLINE( 105)			fragmentShader->push(HX_("neg ft1.z, ft1.z",bc,9e,4b,f1));
HXLINE( 108)			fragmentShader->push(HX_("neg ft1.y, ft1.y",9c,2c,19,b8));
            		}
            		else {
HXLINE( 116)			fragmentShader->push(HX_("mov ft1, fc0.xxyy",e6,b5,77,a8));
HXLINE( 119)			fragmentShader->push(HX_("neg ft1.z,  ft1.z",62,35,93,50));
            		}
HXLINE( 125)		fragmentShader->push(HX_("m33 ft1.xyz, ft1.xyz, v5",72,e3,16,f6));
HXLINE( 128)		fragmentShader->push(HX_("nrm ft1.xyz, ft1.xyz",a3,64,8f,2b));
HXLINE( 133)		int numLights = ::Std_obj::_hx_int(::starling::utils::MathUtil_obj::min(this->_lights->length,(int)8));
HXLINE( 136)		 ::Dynamic nrm =  ::Dynamic(new _hx_Closure_0());
HXLINE( 144)		{
HXLINE( 144)			int _g1 = (int)0;
HXDLIN( 144)			int _g = numLights;
HXDLIN( 144)			while((_g1 < _g)){
HXLINE( 144)				_g1 = (_g1 + (int)1);
HXDLIN( 144)				int i = (_g1 - (int)1);
HXLINE( 146)				 ::starling::extensions::lighting::Light light = this->_lights->__get(i).StaticCast<  ::starling::extensions::lighting::Light >();
HXLINE( 147)				::String lPos = (HX_("fc",3d,59,00,00) + ((int)10 + ((int)2 * i)));
HXLINE( 148)				::String lCol = (HX_("fc",3d,59,00,00) + ((int)11 + ((int)2 * i)));
HXLINE( 150)				if ((light->type == HX_("ambient",18,98,81,09))) {
HXLINE( 152)					fragmentShader->push((HX_("mul ft2, ft0, ",1a,97,0b,f5) + lCol));
HXLINE( 155)					fragmentShader->push(HX_("mul ft2, ft2, v4.xxxx",54,11,e9,64));
            				}
            				else {
HXLINE( 162)					::String calcLightVector;
HXDLIN( 162)					if ((light->type == HX_("point",50,b4,8f,c6))) {
HXLINE( 162)						calcLightVector = ((HX_("sub ft2, ",f8,57,d5,a4) + lPos) + HX_(", v0",6e,12,2e,1d));
            					}
            					else {
HXLINE( 162)						calcLightVector = (HX_("mov ft2, ",4c,7c,ab,9b) + lPos);
            					}
HXLINE( 166)					fragmentShader->push(calcLightVector);
HXLINE( 170)					fragmentShader->push(nrm(HX_("ft2",24,cb,4d,00)));
HXLINE( 173)					fragmentShader->push(HX_("dp3 ft3, ft2, ft1",ab,82,95,07));
HXLINE( 176)					fragmentShader->push(HX_("sat ft3, ft3",26,27,4d,4e));
HXLINE( 179)					fragmentShader->push(HX_("mul ft4, ft3, fc0.z",a4,9b,64,5f));
HXLINE( 184)					fragmentShader->push(HX_("mul ft4, ft4, ft1",47,68,b4,ff));
HXLINE( 187)					fragmentShader->push(HX_("sub ft4, ft4, ft2",c4,16,97,3f));
HXLINE( 190)					fragmentShader->push(HX_("sub ft5, fc3, v0",69,30,d1,3f));
HXLINE( 193)					fragmentShader->push(nrm(HX_("ft5",27,cb,4d,00)));
HXLINE( 196)					fragmentShader->push(HX_("dp3 ft2, ft4, ft5",2c,d0,6d,53));
HXLINE( 199)					fragmentShader->push(HX_("sat ft2, ft2",c6,ca,f1,e7));
HXLINE( 202)					fragmentShader->push((HX_("mul ft3, ft3, ",fc,4f,40,2e) + lCol));
HXLINE( 207)					fragmentShader->push(HX_("mul ft3, ft3, v4.yyyy",b4,22,d9,ba));
HXLINE( 210)					fragmentShader->push(HX_("pow ft4, ft2, v4.wwww",aa,8d,6c,f4));
HXLINE( 215)					fragmentShader->push((HX_("mul ft4, ft4, ",5c,84,73,67) + lCol));
HXLINE( 218)					fragmentShader->push(HX_("mul ft4, ft4, v4.zzzz",14,34,c9,10));
HXLINE( 221)					fragmentShader->push(HX_("mul ft4, ft4, ft0.wwww",68,a1,bf,79));
HXLINE( 224)					fragmentShader->push(HX_("mul ft2, ft0, ft3",4b,20,8a,64));
HXLINE( 229)					fragmentShader->push(HX_("add ft2, ft2, ft4",e7,47,c3,2b));
            				}
HXLINE( 236)				 ::Dynamic _hx_tmp;
HXDLIN( 236)				if ((i == (int)0)) {
HXLINE( 236)					_hx_tmp = HX_("mov ft6, ft2",d4,77,a1,83);
            				}
            				else {
HXLINE( 236)					_hx_tmp = HX_("add ft6, ft6, ft2",65,66,aa,c8);
            				}
HXLINE( 235)				fragmentShader->push(_hx_tmp);
            			}
            		}
HXLINE( 241)		if ((numLights == (int)0)) {
HXLINE( 243)			fragmentShader->push(HX_("mov ft6, fc0.xxxx",4b,cd,cf,2c));
            		}
HXLINE( 246)		fragmentShader->push(HX_("mov ft6.w, ft0.w",72,d4,f3,79));
HXLINE( 249)		fragmentShader->push(HX_("mov oc, ft6",54,aa,cb,a8));
HXLINE( 254)		::String _hx_tmp1 = vertexShader->join(HX_("\n",0a,00,00,00));
HXDLIN( 254)		return ::starling::rendering::Program_obj::fromSource(_hx_tmp1,fragmentShader->join(HX_("\n",0a,00,00,00)),null());
            	}


void LightEffect_obj::beforeDraw( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_264_beforeDraw)
HXLINE( 265)		this->super::beforeDraw(context);
HXLINE( 292)		{
HXLINE( 292)			 ::openfl::_Vector::AbstractVector this1 = ::starling::extensions::lighting::LightEffect_obj::sVector;
HXDLIN( 292)			 ::openfl::_Vector::AbstractVector this2 = ::starling::extensions::lighting::LightEffect_obj::sVector;
HXDLIN( 292)			 ::openfl::_Vector::AbstractVector this3 = ::starling::extensions::lighting::LightEffect_obj::sVector;
HXDLIN( 292)			Float value = ( (Float)(::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)3,(int)32)) );
HXDLIN( 292)			Float value1 = ( (Float)(::openfl::_Vector::IVector_obj::set(this3->data,(int)2,value)) );
HXDLIN( 292)			Float value2 = ( (Float)(::openfl::_Vector::IVector_obj::set(this2->data,(int)1,value1)) );
HXDLIN( 292)			::openfl::_Vector::IVector_obj::set(this1->data,(int)0,value2);
            		}
HXLINE( 293)		context->setProgramConstantsFromVector((int)1,(int)5,::starling::extensions::lighting::LightEffect_obj::sVector,null());
HXLINE( 295)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)0,((Float)0.0));
HXDLIN( 295)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)1,((Float)1.0));
HXDLIN( 295)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)2,((Float)2.0));
HXDLIN( 295)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)3,((Float)0.1));
HXLINE( 296)		context->setProgramConstantsFromVector((int)0,(int)0,::starling::extensions::lighting::LightEffect_obj::sVector,null());
HXLINE( 298)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)0,this->_cameraPosition->x);
HXDLIN( 298)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)1,this->_cameraPosition->y);
HXLINE( 299)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)2,this->_cameraPosition->z);
HXDLIN( 299)		::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)3,this->_cameraPosition->w);
HXLINE( 300)		context->setProgramConstantsFromVector((int)0,(int)3,::starling::extensions::lighting::LightEffect_obj::sVector,null());
HXLINE( 302)		int i = (int)0;
HXLINE( 303)		int len = this->_lights->length;
HXLINE( 304)		while((i < len)){
HXLINE( 306)			 ::starling::extensions::lighting::Light light = this->_lights->__get(i).StaticCast<  ::starling::extensions::lighting::Light >();
HXLINE( 308)			::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)0,light->x);
HXDLIN( 308)			::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)1,light->y);
HXDLIN( 308)			::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)2,light->z);
HXDLIN( 308)			::openfl::_Vector::IVector_obj::set(::starling::extensions::lighting::LightEffect_obj::sVector->data,(int)3,((Float)1.0));
HXLINE( 309)			context->setProgramConstantsFromVector((int)0,((int)10 + ((int)2 * i)),::starling::extensions::lighting::LightEffect_obj::sVector,null());
HXLINE( 311)			::starling::utils::Color_obj::toVector(light->color,::starling::extensions::lighting::LightEffect_obj::sVector);
HXLINE( 312)			context->setProgramConstantsFromVector((int)0,((int)11 + ((int)2 * i)),::starling::extensions::lighting::LightEffect_obj::sVector,null());
HXLINE( 313)			i = (i + (int)1);
            		}
HXLINE( 316)		if (hx::IsNotNull( this->_normalTexture )) {
HXLINE( 318)			bool repeat;
HXDLIN( 318)			if (this->get_textureRepeat()) {
HXLINE( 318)				repeat = this->_normalTexture->get_root()->get_isPotTexture();
            			}
            			else {
HXLINE( 318)				repeat = false;
            			}
HXLINE( 319)			bool _hx_tmp = this->_normalTexture->get_mipMapping();
HXDLIN( 319)			::starling::utils::RenderUtil_obj::setSamplerStateAt((int)1,_hx_tmp,this->get_textureSmoothing(),repeat);
HXLINE( 320)			context->setTextureAt((int)1,this->_normalTexture->get_base());
            		}
HXLINE( 323)		 ::starling::rendering::VertexDataFormat _hx_tmp1 = this->get_vertexFormat();
HXDLIN( 323)		_hx_tmp1->setVertexBufferAt((int)3,this->get_vertexBuffer(),HX_("normalTexCoords",3e,ce,76,b2));
HXLINE( 324)		 ::starling::rendering::VertexDataFormat _hx_tmp2 = this->get_vertexFormat();
HXDLIN( 324)		_hx_tmp2->setVertexBufferAt((int)4,this->get_vertexBuffer(),HX_("material",a7,5c,a5,f0));
HXLINE( 325)		 ::starling::rendering::VertexDataFormat _hx_tmp3 = this->get_vertexFormat();
HXDLIN( 325)		_hx_tmp3->setVertexBufferAt((int)5,this->get_vertexBuffer(),HX_("xAxis",39,e5,67,43));
HXLINE( 326)		 ::starling::rendering::VertexDataFormat _hx_tmp4 = this->get_vertexFormat();
HXDLIN( 326)		_hx_tmp4->setVertexBufferAt((int)6,this->get_vertexBuffer(),HX_("yAxis",ba,79,ce,d6));
HXLINE( 327)		 ::starling::rendering::VertexDataFormat _hx_tmp5 = this->get_vertexFormat();
HXDLIN( 327)		_hx_tmp5->setVertexBufferAt((int)7,this->get_vertexBuffer(),HX_("zScale",b0,43,86,d3));
            	}


void LightEffect_obj::afterDraw( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_331_afterDraw)
HXLINE( 332)		context->setTextureAt((int)1,null());
HXLINE( 333)		context->setVertexBufferAt((int)3,null(),null(),null());
HXLINE( 334)		context->setVertexBufferAt((int)4,null(),null(),null());
HXLINE( 335)		context->setVertexBufferAt((int)5,null(),null(),null());
HXLINE( 336)		context->setVertexBufferAt((int)6,null(),null(),null());
HXLINE( 337)		context->setVertexBufferAt((int)7,null(),null(),null());
HXLINE( 339)		this->super::afterDraw(context);
            	}


int LightEffect_obj::get_programVariantName(){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_343_get_programVariantName)
HXLINE( 344)		int normalMapBits = ::starling::utils::RenderUtil_obj::getTextureVariantBits(this->_normalTexture);
HXLINE( 345)		int numLights = this->_lights->length;
HXLINE( 346)		int lightBits = (int)0;
HXLINE( 348)		{
HXLINE( 348)			int _g1 = (int)0;
HXDLIN( 348)			int _g = numLights;
HXDLIN( 348)			while((_g1 < _g)){
HXLINE( 348)				_g1 = (_g1 + (int)1);
HXDLIN( 348)				int i = (_g1 - (int)1);
HXLINE( 350)				 ::starling::extensions::lighting::Light light = this->_lights->__get(i).StaticCast<  ::starling::extensions::lighting::Light >();
HXLINE( 351)				int lightBit;
HXLINE( 353)				::String _sw0_ = light->type;
HXLINE( 355)				::String _hx_switch_0 = _sw0_;
            				if (  (_hx_switch_0==HX_("ambient",18,98,81,09)) ){
HXLINE( 357)					lightBit = (int)3;
HXDLIN( 357)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("directional",ea,04,cd,ea)) ){
HXLINE( 358)					lightBit = (int)2;
HXDLIN( 358)					goto _hx_goto_8;
            				}
            				/* default */{
HXLINE( 359)					lightBit = (int)1;
            				}
            				_hx_goto_8:;
HXLINE( 362)				lightBits = ((int)lightBits | (int)((int)lightBit << (int)(i * (int)2)));
            			}
            		}
HXLINE( 365)		return ((int)((int)this->super::get_programVariantName() | (int)((int)normalMapBits << (int)(int)8)) | (int)((int)lightBits << (int)(int)16));
            	}


 ::starling::rendering::VertexDataFormat LightEffect_obj::get_vertexFormat(){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_370_get_vertexFormat)
HXDLIN( 370)		return ::starling::extensions::lighting::LightEffect_obj::VERTEX_FORMAT;
            	}


int LightEffect_obj::get_numLights(){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_375_get_numLights)
HXDLIN( 375)		return this->_lights->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightEffect_obj,get_numLights,return )

int LightEffect_obj::set_numLights(int value){
            	HX_GC_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_378_set_numLights)
HXLINE( 379)		int oldNumLights = this->_lights->length;
HXLINE( 381)		{
HXLINE( 381)			int _g1 = oldNumLights;
HXDLIN( 381)			int _g = value;
HXDLIN( 381)			while((_g1 < _g)){
HXLINE( 381)				_g1 = (_g1 + (int)1);
HXDLIN( 381)				int i = (_g1 - (int)1);
HXLINE( 383)				::Array< ::Dynamic> _hx_tmp = this->_lights;
HXDLIN( 383)				_hx_tmp[i] =  ::starling::extensions::lighting::Light_obj::__alloc( HX_CTX ,null(),null());
            			}
            		}
HXLINE( 387)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightEffect_obj,set_numLights,return )

void LightEffect_obj::setLightAt(int index,::String type,int color, ::openfl::geom::Vector3D positionOrDirection){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_392_setLightAt)
HXLINE( 393)		if ((index >= this->get_numLights())) {
HXLINE( 395)			this->set_numLights((index + (int)1));
            		}
HXLINE( 398)		 ::starling::extensions::lighting::Light light = this->_lights->__get(index).StaticCast<  ::starling::extensions::lighting::Light >();
HXLINE( 399)		light->type = type;
HXLINE( 400)		light->color = color;
HXLINE( 401)		light->x = positionOrDirection->x;
HXLINE( 402)		light->y = positionOrDirection->y;
HXLINE( 403)		light->z = positionOrDirection->z;
            	}


HX_DEFINE_DYNAMIC_FUNC4(LightEffect_obj,setLightAt,(void))

 ::openfl::geom::Vector3D LightEffect_obj::get_cameraPosition(){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_409_get_cameraPosition)
HXDLIN( 409)		return this->_cameraPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightEffect_obj,get_cameraPosition,return )

 ::openfl::geom::Vector3D LightEffect_obj::set_cameraPosition( ::openfl::geom::Vector3D value){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_412_set_cameraPosition)
HXLINE( 413)		this->_cameraPosition->copyFrom(value);
HXLINE( 414)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightEffect_obj,set_cameraPosition,return )

 ::starling::textures::Texture LightEffect_obj::get_normalTexture(){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_419_get_normalTexture)
HXDLIN( 419)		return this->_normalTexture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightEffect_obj,get_normalTexture,return )

 ::starling::textures::Texture LightEffect_obj::set_normalTexture( ::starling::textures::Texture value){
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_422_set_normalTexture)
HXLINE( 423)		this->_normalTexture = value;
HXLINE( 424)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightEffect_obj,set_normalTexture,return )

 ::starling::rendering::VertexDataFormat LightEffect_obj::VERTEX_FORMAT;

 ::openfl::_Vector::AbstractVector LightEffect_obj::sVector;


hx::ObjectPtr< LightEffect_obj > LightEffect_obj::__new() {
	hx::ObjectPtr< LightEffect_obj > __this = new LightEffect_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< LightEffect_obj > LightEffect_obj::__alloc(hx::Ctx *_hx_ctx) {
	LightEffect_obj *__this = (LightEffect_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LightEffect_obj), true, "starling.extensions.lighting.LightEffect"));
	*(void **)__this = LightEffect_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LightEffect_obj::LightEffect_obj()
{
}

void LightEffect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LightEffect);
	HX_MARK_MEMBER_NAME(_lights,"_lights");
	HX_MARK_MEMBER_NAME(_normalTexture,"_normalTexture");
	HX_MARK_MEMBER_NAME(_cameraPosition,"_cameraPosition");
	 ::starling::rendering::FilterEffect_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LightEffect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_lights,"_lights");
	HX_VISIT_MEMBER_NAME(_normalTexture,"_normalTexture");
	HX_VISIT_MEMBER_NAME(_cameraPosition,"_cameraPosition");
	 ::starling::rendering::FilterEffect_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LightEffect_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_lights") ) { return hx::Val( _lights ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"numLights") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numLights() ); }
		if (HX_FIELD_EQ(inName,"afterDraw") ) { return hx::Val( afterDraw_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"beforeDraw") ) { return hx::Val( beforeDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLightAt") ) { return hx::Val( setLightAt_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"normalTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_normalTexture() ); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLights") ) { return hx::Val( get_numLights_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_numLights") ) { return hx::Val( set_numLights_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraPosition") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cameraPosition() ); }
		if (HX_FIELD_EQ(inName,"_normalTexture") ) { return hx::Val( _normalTexture ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_cameraPosition") ) { return hx::Val( _cameraPosition ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_vertexFormat") ) { return hx::Val( get_vertexFormat_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_normalTexture") ) { return hx::Val( get_normalTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_normalTexture") ) { return hx::Val( set_normalTexture_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_cameraPosition") ) { return hx::Val( get_cameraPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cameraPosition") ) { return hx::Val( set_cameraPosition_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_programVariantName") ) { return hx::Val( get_programVariantName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LightEffect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sVector") ) { outValue = ( sVector ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { outValue = ( VERTEX_FORMAT ); return true; }
	}
	return false;
}

hx::Val LightEffect_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_lights") ) { _lights=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"numLights") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numLights(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"normalTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_normalTexture(inValue.Cast<  ::starling::textures::Texture >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraPosition") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cameraPosition(inValue.Cast<  ::openfl::geom::Vector3D >()) ); }
		if (HX_FIELD_EQ(inName,"_normalTexture") ) { _normalTexture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_cameraPosition") ) { _cameraPosition=inValue.Cast<  ::openfl::geom::Vector3D >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool LightEffect_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sVector") ) { sVector=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { VERTEX_FORMAT=ioValue.Cast<  ::starling::rendering::VertexDataFormat >(); return true; }
	}
	return false;
}

void LightEffect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("numLights","\xc3","\x75","\x03","\x99"));
	outFields->push(HX_HCSTRING("cameraPosition","\x6e","\x50","\x87","\xc0"));
	outFields->push(HX_HCSTRING("normalTexture","\x74","\x21","\x6a","\x38"));
	outFields->push(HX_HCSTRING("_lights","\x7c","\x3c","\x79","\x56"));
	outFields->push(HX_HCSTRING("_normalTexture","\xb5","\x11","\xbc","\x76"));
	outFields->push(HX_HCSTRING("_cameraPosition","\x0d","\x99","\xe7","\x09"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LightEffect_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(LightEffect_obj,_lights),HX_HCSTRING("_lights","\x7c","\x3c","\x79","\x56")},
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(LightEffect_obj,_normalTexture),HX_HCSTRING("_normalTexture","\xb5","\x11","\xbc","\x76")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(int)offsetof(LightEffect_obj,_cameraPosition),HX_HCSTRING("_cameraPosition","\x0d","\x99","\xe7","\x09")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo LightEffect_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::starling::rendering::VertexDataFormat*/ ,(void *) &LightEffect_obj::VERTEX_FORMAT,HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &LightEffect_obj::sVector,HX_HCSTRING("sVector","\x96","\x7d","\x16","\x7a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String LightEffect_obj_sMemberFields[] = {
	HX_HCSTRING("_lights","\x7c","\x3c","\x79","\x56"),
	HX_HCSTRING("_normalTexture","\xb5","\x11","\xbc","\x76"),
	HX_HCSTRING("_cameraPosition","\x0d","\x99","\xe7","\x09"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("beforeDraw","\x23","\x58","\x19","\x91"),
	HX_HCSTRING("afterDraw","\x40","\xfc","\x4e","\xc2"),
	HX_HCSTRING("get_programVariantName","\x95","\x92","\xf8","\x69"),
	HX_HCSTRING("get_vertexFormat","\x44","\x6e","\x42","\xa2"),
	HX_HCSTRING("get_numLights","\x9a","\x49","\x67","\x5a"),
	HX_HCSTRING("set_numLights","\xa6","\x2b","\x6d","\x9f"),
	HX_HCSTRING("setLightAt","\xe7","\x4f","\xc2","\x6c"),
	HX_HCSTRING("get_cameraPosition","\x37","\x31","\x21","\x5c"),
	HX_HCSTRING("set_cameraPosition","\xab","\x63","\xd0","\x38"),
	HX_HCSTRING("get_normalTexture","\xcb","\x2c","\xda","\x3e"),
	HX_HCSTRING("set_normalTexture","\xd7","\x04","\x48","\x62"),
	::String(null()) };

static void LightEffect_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LightEffect_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(LightEffect_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_MARK_MEMBER_NAME(LightEffect_obj::sVector,"sVector");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LightEffect_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LightEffect_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(LightEffect_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_VISIT_MEMBER_NAME(LightEffect_obj::sVector,"sVector");
};

#endif

hx::Class LightEffect_obj::__mClass;

static ::String LightEffect_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29"),
	HX_HCSTRING("sVector","\x96","\x7d","\x16","\x7a"),
	::String(null())
};

void LightEffect_obj::__register()
{
	hx::Object *dummy = new LightEffect_obj;
	LightEffect_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.extensions.lighting.LightEffect","\x39","\x69","\x28","\x49");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LightEffect_obj::__GetStatic;
	__mClass->mSetStaticField = &LightEffect_obj::__SetStatic;
	__mClass->mMarkFunc = LightEffect_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LightEffect_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LightEffect_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LightEffect_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LightEffect_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LightEffect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LightEffect_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LightEffect_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_35_boot)
HXDLIN(  35)		VERTEX_FORMAT = ::starling::rendering::MeshEffect_obj::VERTEX_FORMAT->extend(HX_("normalTexCoords:float2, material:bytes4, xAxis:float2, yAxis:float2, zScale:float1",80,11,0b,f6));
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_43_boot)
HXDLIN(  43)			int length = null();
HXDLIN(  43)			bool fixed = null();
HXDLIN(  43)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_243a5e80bd73d0ed_43_boot)
HXDLIN(  43)		sVector =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace starling
} // end namespace extensions
} // end namespace lighting
