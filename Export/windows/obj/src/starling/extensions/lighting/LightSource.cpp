// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils__Dictionary_Dictionary_Impl_
#include <openfl/utils/_Dictionary/Dictionary_Impl_.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Sprite3D
#include <starling/display/Sprite3D.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_Touch
#include <starling/events/Touch.h>
#endif
#ifndef INCLUDED_starling_events_TouchEvent
#include <starling/events/TouchEvent.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_LightSource
#include <starling/extensions/lighting/LightSource.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f98633b61d5b8b80_94_new,"starling.extensions.lighting.LightSource","new",0xc2bbddf5,"starling.extensions.lighting.LightSource.new","starling/extensions/lighting/LightSource.hx",94,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_106_onAddedToStage,"starling.extensions.lighting.LightSource","onAddedToStage",0x39d862ad,"starling.extensions.lighting.LightSource.onAddedToStage","starling/extensions/lighting/LightSource.hx",106,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_125_onRemovedFromStage,"starling.extensions.lighting.LightSource","onRemovedFromStage",0xa6404e7e,"starling.extensions.lighting.LightSource.onRemovedFromStage","starling/extensions/lighting/LightSource.hx",125,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_137_onTouch,"starling.extensions.lighting.LightSource","onTouch",0xc117b235,"starling.extensions.lighting.LightSource.onTouch","starling/extensions/lighting/LightSource.hx",137,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_196_get_color,"starling.extensions.lighting.LightSource","get_color",0xd973b90f,"starling.extensions.lighting.LightSource.get_color","starling/extensions/lighting/LightSource.hx",196,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_199_set_color,"starling.extensions.lighting.LightSource","set_color",0xbcc4a51b,"starling.extensions.lighting.LightSource.set_color","starling/extensions/lighting/LightSource.hx",199,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_216_get_brightness,"starling.extensions.lighting.LightSource","get_brightness",0xdefaf6a5,"starling.extensions.lighting.LightSource.get_brightness","starling/extensions/lighting/LightSource.hx",216,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_219_set_brightness,"starling.extensions.lighting.LightSource","set_brightness",0xff1adf19,"starling.extensions.lighting.LightSource.set_brightness","starling/extensions/lighting/LightSource.hx",219,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_246_get_showLightBulb,"starling.extensions.lighting.LightSource","get_showLightBulb",0x56c4c5ee,"starling.extensions.lighting.LightSource.get_showLightBulb","starling/extensions/lighting/LightSource.hx",246,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_249_set_showLightBulb,"starling.extensions.lighting.LightSource","set_showLightBulb",0x7a329dfa,"starling.extensions.lighting.LightSource.set_showLightBulb","starling/extensions/lighting/LightSource.hx",249,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_273_get_type,"starling.extensions.lighting.LightSource","get_type",0x8839448e,"starling.extensions.lighting.LightSource.get_type","starling/extensions/lighting/LightSource.hx",273,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_276_set_type,"starling.extensions.lighting.LightSource","set_type",0x36969e02,"starling.extensions.lighting.LightSource.set_type","starling/extensions/lighting/LightSource.hx",276,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_292_get_isActive,"starling.extensions.lighting.LightSource","get_isActive",0x87cfa924,"starling.extensions.lighting.LightSource.get_isActive","starling/extensions/lighting/LightSource.hx",292,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_295_set_isActive,"starling.extensions.lighting.LightSource","set_isActive",0x9cc8cc98,"starling.extensions.lighting.LightSource.set_isActive","starling/extensions/lighting/LightSource.hx",295,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_163_getBulbTexture,"starling.extensions.lighting.LightSource","getBulbTexture",0x11b9f867,"starling.extensions.lighting.LightSource.getBulbTexture","starling/extensions/lighting/LightSource.hx",163,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_314_getActiveInstances,"starling.extensions.lighting.LightSource","getActiveInstances",0xc66bdaad,"starling.extensions.lighting.LightSource.getActiveInstances","starling/extensions/lighting/LightSource.hx",314,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_343_createPointLight,"starling.extensions.lighting.LightSource","createPointLight",0x829d81cd,"starling.extensions.lighting.LightSource.createPointLight","starling/extensions/lighting/LightSource.hx",343,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_349_createAmbientLight,"starling.extensions.lighting.LightSource","createAmbientLight",0x5046d0c5,"starling.extensions.lighting.LightSource.createAmbientLight","starling/extensions/lighting/LightSource.hx",349,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_355_createDirectionalLight,"starling.extensions.lighting.LightSource","createDirectionalLight",0xd871ca33,"starling.extensions.lighting.LightSource.createDirectionalLight","starling/extensions/lighting/LightSource.hx",355,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_70_boot,"starling.extensions.lighting.LightSource","boot",0x99bf58fd,"starling.extensions.lighting.LightSource.boot","starling/extensions/lighting/LightSource.hx",70,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_73_boot,"starling.extensions.lighting.LightSource","boot",0x99bf58fd,"starling.extensions.lighting.LightSource.boot","starling/extensions/lighting/LightSource.hx",73,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_76_boot,"starling.extensions.lighting.LightSource","boot",0x99bf58fd,"starling.extensions.lighting.LightSource.boot","starling/extensions/lighting/LightSource.hx",76,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_79_boot,"starling.extensions.lighting.LightSource","boot",0x99bf58fd,"starling.extensions.lighting.LightSource.boot","starling/extensions/lighting/LightSource.hx",79,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_88_boot,"starling.extensions.lighting.LightSource","boot",0x99bf58fd,"starling.extensions.lighting.LightSource.boot","starling/extensions/lighting/LightSource.hx",88,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_89_boot,"starling.extensions.lighting.LightSource","boot",0x99bf58fd,"starling.extensions.lighting.LightSource.boot","starling/extensions/lighting/LightSource.hx",89,0xce1abd3c)
HX_LOCAL_STACK_FRAME(_hx_pos_f98633b61d5b8b80_90_boot,"starling.extensions.lighting.LightSource","boot",0x99bf58fd,"starling.extensions.lighting.LightSource.boot","starling/extensions/lighting/LightSource.hx",90,0xce1abd3c)
namespace starling{
namespace extensions{
namespace lighting{

void LightSource_obj::__construct(::String __o_type,hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness){
::String type = __o_type.Default(HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6"));
int color = __o_color.Default(16777215);
Float brightness = __o_brightness.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_94_new)
HXLINE(  95)		super::__construct();
HXLINE(  96)		this->_type = type;
HXLINE(  97)		this->_color = color;
HXLINE(  98)		this->_active = true;
HXLINE(  99)		this->_brightness = brightness;
HXLINE( 101)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn());
HXLINE( 102)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn());
            	}

Dynamic LightSource_obj::__CreateEmpty() { return new LightSource_obj; }

void *LightSource_obj::_hx_vtable = 0;

Dynamic LightSource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LightSource_obj > _hx_result = new LightSource_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool LightSource_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x31a4bcfa) {
		if (inClassId<=(int)0x2874232c) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x2874232c;
			}
		} else {
			return inClassId==(int)0x31a4bcfa;
		}
	} else {
		return inClassId==(int)0x53c89565 || inClassId==(int)0x6dea180f;
	}
}

void LightSource_obj::onAddedToStage( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_106_onAddedToStage)
HXLINE( 107)		 ::starling::display::Stage stage = this->get_stage();
HXLINE( 108)		 ::haxe::ds::StringMap instances = ::starling::extensions::lighting::LightSource_obj::sInstances;
HXDLIN( 108)		::Array< ::Dynamic> instances1 = ( (::Array< ::Dynamic>)(::Reflect_obj::field(instances,::Std_obj::string(stage))) );
HXLINE( 110)		if (hx::IsNull( instances1 )) {
HXLINE( 112)			instances1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
HXLINE( 113)			 ::haxe::ds::StringMap _hx_tmp = ::starling::extensions::lighting::LightSource_obj::sInstances;
HXDLIN( 113)			::Reflect_obj::setField(_hx_tmp,::Std_obj::string(stage),instances1);
            		}
            		else {
HXLINE( 117)			if ((::Lambda_obj::indexOf(instances1,hx::ObjectPtr<OBJ_>(this)) == (int)-1)) {
HXLINE( 119)				instances1[instances1->length] = hx::ObjectPtr<OBJ_>(this);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,onAddedToStage,(void))

void LightSource_obj::onRemovedFromStage( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_125_onRemovedFromStage)
HXLINE( 126)		 ::starling::display::Stage stage = this->get_stage();
HXLINE( 127)		 ::haxe::ds::StringMap instances = ::starling::extensions::lighting::LightSource_obj::sInstances;
HXDLIN( 127)		::Array< ::Dynamic> instances1 = ( (::Array< ::Dynamic>)(::Reflect_obj::field(instances,::Std_obj::string(stage))) );
HXLINE( 128)		instances1->remove(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,onRemovedFromStage,(void))

void LightSource_obj::onTouch( ::starling::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_137_onTouch)
HXLINE( 138)		 ::starling::events::Touch touch = event->getTouch(hx::ObjectPtr<OBJ_>(this),HX_("moved",33,cc,65,0c),null());
HXLINE( 139)		if (hx::IsNotNull( touch )) {
HXLINE( 141)			 ::starling::display::DisplayObjectContainer _hx_tmp = this->get_parent();
HXDLIN( 141)			touch->getMovement(_hx_tmp,::starling::extensions::lighting::LightSource_obj::sMovement);
HXLINE( 143)			if (event->get_shiftKey()) {
HXLINE( 145)				{
HXLINE( 145)					 ::starling::extensions::lighting::LightSource _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 145)					Float _hx_tmp1 = _g->get_z();
HXDLIN( 145)					_g->set_z((_hx_tmp1 + ::starling::extensions::lighting::LightSource_obj::sMovement->y));
            				}
HXLINE( 146)				{
HXLINE( 146)					 ::starling::extensions::lighting::LightSource _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 146)					Float _hx_tmp2 = _g1->get_rotation();
HXDLIN( 146)					_g1->set_rotation((_hx_tmp2 + (::starling::extensions::lighting::LightSource_obj::sMovement->x * ((Float)0.02))));
            				}
            			}
            			else {
HXLINE( 150)				{
HXLINE( 150)					 ::starling::extensions::lighting::LightSource _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 150)					Float _hx_tmp3 = _g2->get_x();
HXDLIN( 150)					_g2->set_x((_hx_tmp3 + ::starling::extensions::lighting::LightSource_obj::sMovement->x));
            				}
HXLINE( 151)				{
HXLINE( 151)					 ::starling::extensions::lighting::LightSource _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 151)					Float _hx_tmp4 = _g3->get_y();
HXDLIN( 151)					_g3->set_y((_hx_tmp4 + ::starling::extensions::lighting::LightSource_obj::sMovement->y));
            				}
            			}
            		}
HXLINE( 155)		touch = event->getTouch(hx::ObjectPtr<OBJ_>(this),HX_("ended",fa,48,7a,70),null());
HXLINE( 156)		bool _hx_tmp5;
HXDLIN( 156)		if (hx::IsNotNull( touch )) {
HXLINE( 156)			_hx_tmp5 = (touch->get_tapCount() == (int)2);
            		}
            		else {
HXLINE( 156)			_hx_tmp5 = false;
            		}
HXDLIN( 156)		if (_hx_tmp5) {
HXLINE( 158)			this->set_isActive(!(this->_active));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,onTouch,(void))

int LightSource_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_196_get_color)
HXDLIN( 196)		return this->_color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightSource_obj,get_color,return )

int LightSource_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_199_set_color)
HXLINE( 200)		if ((this->_color != value)) {
HXLINE( 202)			this->_color = value;
HXLINE( 203)			this->setRequiresRedraw();
HXLINE( 205)			bool _hx_tmp;
HXDLIN( 205)			if (hx::IsNotNull( this->_lightBulb )) {
HXLINE( 205)				_hx_tmp = (this->_brightness > (int)0);
            			}
            			else {
HXLINE( 205)				_hx_tmp = false;
            			}
HXDLIN( 205)			if (_hx_tmp) {
HXLINE( 207)				this->_lightBulb->set_color(this->_color);
            			}
            		}
HXLINE( 210)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,set_color,return )

Float LightSource_obj::get_brightness(){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_216_get_brightness)
HXDLIN( 216)		return this->_brightness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightSource_obj,get_brightness,return )

Float LightSource_obj::set_brightness(Float value){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_219_set_brightness)
HXLINE( 220)		if ((this->_brightness != value)) {
HXLINE( 222)			this->_brightness = value;
HXLINE( 223)			this->setRequiresRedraw();
HXLINE( 225)			if (hx::IsNotNull( this->_lightBulb )) {
HXLINE( 227)				if ((value == (int)0)) {
HXLINE( 229)					this->_lightBulb->set_color((int)0);
HXDLIN( 229)					this->_lightBulb->set_alpha(((Float)1.0));
            				}
            				else {
HXLINE( 233)					this->_lightBulb->set_color(this->_color);
HXDLIN( 233)					 ::starling::display::Image _hx_tmp = this->_lightBulb;
HXDLIN( 233)					_hx_tmp->set_alpha((((Float)0.2) + (((Float)0.8) * value)));
            				}
            			}
            		}
HXLINE( 237)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,set_brightness,return )

bool LightSource_obj::get_showLightBulb(){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_246_get_showLightBulb)
HXDLIN( 246)		if (hx::IsNotNull( this->_lightBulb )) {
HXDLIN( 246)			return this->_lightBulb->get_visible();
            		}
            		else {
HXDLIN( 246)			return false;
            		}
HXDLIN( 246)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightSource_obj,get_showLightBulb,return )

bool LightSource_obj::set_showLightBulb(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_f98633b61d5b8b80_249_set_showLightBulb)
HXLINE( 250)		if ((value == this->get_showLightBulb())) {
HXLINE( 252)			return value;
            		}
HXLINE( 254)		if (hx::IsNull( this->_lightBulb )) {
HXLINE( 256)			this->_lightBulb =  ::starling::display::Image_obj::__alloc( HX_CTX ,::starling::extensions::lighting::LightSource_obj::getBulbTexture(this->_type));
HXLINE( 257)			this->_lightBulb->alignPivot(null(),null());
HXLINE( 258)			this->_lightBulb->set_color(this->_color);
HXLINE( 259)			this->_lightBulb->set_alpha(this->_brightness);
HXLINE( 260)			this->_lightBulb->set_useHandCursor(true);
HXLINE( 262)			this->addChild(this->_lightBulb);
HXLINE( 263)			this->addEventListener(HX_("touch",bf,17,33,14),this->onTouch_dyn());
            		}
HXLINE( 265)		this->_lightBulb->set_visible(value);
HXLINE( 266)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,set_showLightBulb,return )

::String LightSource_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_273_get_type)
HXDLIN( 273)		return this->_type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightSource_obj,get_type,return )

::String LightSource_obj::set_type(::String value){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_276_set_type)
HXLINE( 277)		if ((this->_type != value)) {
HXLINE( 279)			this->_type = value;
HXLINE( 280)			if (hx::IsNotNull( this->_lightBulb )) {
HXLINE( 282)				 ::starling::display::Image _hx_tmp = this->_lightBulb;
HXDLIN( 282)				_hx_tmp->set_texture(::starling::extensions::lighting::LightSource_obj::getBulbTexture(value));
            			}
HXLINE( 284)			this->setRequiresRedraw();
            		}
HXLINE( 286)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,set_type,return )

bool LightSource_obj::get_isActive(){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_292_get_isActive)
HXDLIN( 292)		return this->_active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightSource_obj,get_isActive,return )

bool LightSource_obj::set_isActive(bool value){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_295_set_isActive)
HXLINE( 296)		if ((this->_active != value)) {
HXLINE( 298)			this->_active = value;
HXLINE( 299)			if (hx::IsNotNull( this->_lightBulb )) {
HXLINE( 301)				int _hx_tmp;
HXDLIN( 301)				if (value) {
HXLINE( 301)					_hx_tmp = this->_color;
            				}
            				else {
HXLINE( 301)					_hx_tmp = (int)0;
            				}
HXDLIN( 301)				this->_lightBulb->set_color(_hx_tmp);
            			}
HXLINE( 303)			this->setRequiresRedraw();
            		}
HXLINE( 305)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,set_isActive,return )

hx::Class LightSource_obj::LightBulbAtlas;

::String LightSource_obj::ATLAS_TEXTURE_DATA_NAME;

::String LightSource_obj::TYPE_POINT;

::String LightSource_obj::TYPE_AMBIENT;

::String LightSource_obj::TYPE_DIRECTIONAL;

 ::openfl::geom::Point LightSource_obj::sMovement;

 ::haxe::ds::StringMap LightSource_obj::sInstances;

 ::openfl::geom::Rectangle LightSource_obj::sRegion;

 ::starling::textures::Texture LightSource_obj::getBulbTexture(::String type){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_163_getBulbTexture)
HXLINE( 165)		 ::starling::textures::Texture atlasTexture = null();
HXLINE( 166)		if (hx::IsNull( atlasTexture )) {
HXLINE( 168)			atlasTexture = ::starling::textures::Texture_obj::fromEmbeddedAsset(::starling::extensions::lighting::LightSource_obj::LightBulbAtlas,false,false,(int)2,(int)2,null());
            		}
HXLINE( 174)		::starling::extensions::lighting::LightSource_obj::sRegion->x = (::starling::extensions::lighting::LightSource_obj::sRegion->y = (int)0);
HXLINE( 175)		Float _hx_tmp = atlasTexture->get_width();
HXDLIN( 175)		::starling::extensions::lighting::LightSource_obj::sRegion->width = ((Float)_hx_tmp / (Float)(int)3);
HXLINE( 176)		::starling::extensions::lighting::LightSource_obj::sRegion->height = atlasTexture->get_height();
HXLINE( 178)		if ((type == HX_("ambient",18,98,81,09))) {
HXLINE( 180)			::starling::extensions::lighting::LightSource_obj::sRegion->x = ::starling::extensions::lighting::LightSource_obj::sRegion->width;
            		}
            		else {
HXLINE( 184)			if ((type == HX_("directional",ea,04,cd,ea))) {
HXLINE( 186)				::starling::extensions::lighting::LightSource_obj::sRegion->x = (::starling::extensions::lighting::LightSource_obj::sRegion->width * (int)2);
            			}
            		}
HXLINE( 190)		return ::starling::textures::Texture_obj::fromTexture(atlasTexture,::starling::extensions::lighting::LightSource_obj::sRegion,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LightSource_obj,getBulbTexture,return )

::Array< ::Dynamic> LightSource_obj::getActiveInstances( ::starling::display::Stage stage,::Array< ::Dynamic> out){
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_314_getActiveInstances)
HXLINE( 315)		if (hx::IsNull( out )) {
HXLINE( 317)			out = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 324)		 ::haxe::ds::StringMap instances = ::starling::extensions::lighting::LightSource_obj::sInstances;
HXDLIN( 324)		::Array< ::Dynamic> instances1 = ( (::Array< ::Dynamic>)(::Reflect_obj::field(instances,::Std_obj::string(stage))) );
HXLINE( 325)		if (hx::IsNotNull( instances1 )) {
HXLINE( 327)			int _g1 = (int)0;
HXDLIN( 327)			int _g = instances1->length;
HXDLIN( 327)			while((_g1 < _g)){
HXLINE( 327)				_g1 = (_g1 + (int)1);
HXDLIN( 327)				int i = (_g1 - (int)1);
HXLINE( 329)				 ::starling::extensions::lighting::LightSource light = instances1->__get(i).StaticCast<  ::starling::extensions::lighting::LightSource >();
HXLINE( 330)				bool _hx_tmp;
HXDLIN( 330)				if ((light->_brightness > (int)0)) {
HXLINE( 330)					_hx_tmp = light->_active;
            				}
            				else {
HXLINE( 330)					_hx_tmp = false;
            				}
HXDLIN( 330)				if (_hx_tmp) {
HXLINE( 332)					out[out->length] = light;
            				}
            			}
            		}
HXLINE( 337)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LightSource_obj,getActiveInstances,return )

 ::starling::extensions::lighting::LightSource LightSource_obj::createPointLight(hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness){
int color = __o_color.Default(16777215);
Float brightness = __o_brightness.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_f98633b61d5b8b80_343_createPointLight)
HXDLIN( 343)		return  ::starling::extensions::lighting::LightSource_obj::__alloc( HX_CTX ,HX_("point",50,b4,8f,c6),color,brightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LightSource_obj,createPointLight,return )

 ::starling::extensions::lighting::LightSource LightSource_obj::createAmbientLight(hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness){
int color = __o_color.Default(16777215);
Float brightness = __o_brightness.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_f98633b61d5b8b80_349_createAmbientLight)
HXDLIN( 349)		return  ::starling::extensions::lighting::LightSource_obj::__alloc( HX_CTX ,HX_("ambient",18,98,81,09),color,brightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LightSource_obj,createAmbientLight,return )

 ::starling::extensions::lighting::LightSource LightSource_obj::createDirectionalLight(hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness){
int color = __o_color.Default(16777215);
Float brightness = __o_brightness.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_f98633b61d5b8b80_355_createDirectionalLight)
HXDLIN( 355)		return  ::starling::extensions::lighting::LightSource_obj::__alloc( HX_CTX ,HX_("directional",ea,04,cd,ea),color,brightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LightSource_obj,createDirectionalLight,return )


hx::ObjectPtr< LightSource_obj > LightSource_obj::__new(::String __o_type,hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness) {
	hx::ObjectPtr< LightSource_obj > __this = new LightSource_obj();
	__this->__construct(__o_type,__o_color,__o_brightness);
	return __this;
}

hx::ObjectPtr< LightSource_obj > LightSource_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_type,hx::Null< int >  __o_color,hx::Null< Float >  __o_brightness) {
	LightSource_obj *__this = (LightSource_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LightSource_obj), true, "starling.extensions.lighting.LightSource"));
	*(void **)__this = LightSource_obj::_hx_vtable;
	__this->__construct(__o_type,__o_color,__o_brightness);
	return __this;
}

LightSource_obj::LightSource_obj()
{
}

void LightSource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LightSource);
	HX_MARK_MEMBER_NAME(_type,"_type");
	HX_MARK_MEMBER_NAME(_color,"_color");
	HX_MARK_MEMBER_NAME(_active,"_active");
	HX_MARK_MEMBER_NAME(_brightness,"_brightness");
	HX_MARK_MEMBER_NAME(_lightBulb,"_lightBulb");
	 ::starling::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LightSource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_type,"_type");
	HX_VISIT_MEMBER_NAME(_color,"_color");
	HX_VISIT_MEMBER_NAME(_active,"_active");
	HX_VISIT_MEMBER_NAME(_brightness,"_brightness");
	HX_VISIT_MEMBER_NAME(_lightBulb,"_lightBulb");
	 ::starling::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LightSource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		if (HX_FIELD_EQ(inName,"_type") ) { return hx::Val( _type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_color") ) { return hx::Val( _color ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_active") ) { return hx::Val( _active ); }
		if (HX_FIELD_EQ(inName,"onTouch") ) { return hx::Val( onTouch_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isActive") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isActive() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"brightness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_brightness() ); }
		if (HX_FIELD_EQ(inName,"_lightBulb") ) { return hx::Val( _lightBulb ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_brightness") ) { return hx::Val( _brightness ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_isActive") ) { return hx::Val( get_isActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_isActive") ) { return hx::Val( set_isActive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"showLightBulb") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_showLightBulb() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return hx::Val( onAddedToStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_brightness") ) { return hx::Val( get_brightness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_brightness") ) { return hx::Val( set_brightness_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_showLightBulb") ) { return hx::Val( get_showLightBulb_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_showLightBulb") ) { return hx::Val( set_showLightBulb_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LightSource_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sRegion") ) { outValue = ( sRegion ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sMovement") ) { outValue = ( sMovement ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sInstances") ) { outValue = ( sInstances ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"LightBulbAtlas") ) { outValue = ( LightBulbAtlas ); return true; }
		if (HX_FIELD_EQ(inName,"getBulbTexture") ) { outValue = getBulbTexture_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"createPointLight") ) { outValue = createPointLight_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getActiveInstances") ) { outValue = getActiveInstances_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createAmbientLight") ) { outValue = createAmbientLight_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createDirectionalLight") ) { outValue = createDirectionalLight_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"ATLAS_TEXTURE_DATA_NAME") ) { outValue = ( ATLAS_TEXTURE_DATA_NAME ); return true; }
	}
	return false;
}

hx::Val LightSource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_type") ) { _type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_color") ) { _color=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_active") ) { _active=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isActive") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_isActive(inValue.Cast< bool >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"brightness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_brightness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_lightBulb") ) { _lightBulb=inValue.Cast<  ::starling::display::Image >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_brightness") ) { _brightness=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"showLightBulb") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_showLightBulb(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool LightSource_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sRegion") ) { sRegion=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sMovement") ) { sMovement=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sInstances") ) { sInstances=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"LightBulbAtlas") ) { LightBulbAtlas=ioValue.Cast< hx::Class >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"ATLAS_TEXTURE_DATA_NAME") ) { ATLAS_TEXTURE_DATA_NAME=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void LightSource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("brightness","\xd1","\x8d","\x71","\x65"));
	outFields->push(HX_HCSTRING("showLightBulb","\x42","\xf2","\x5b","\xaa"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("isActive","\x50","\xdd","\xaf","\x6e"));
	outFields->push(HX_HCSTRING("_type","\x99","\x0e","\x1a","\x00"));
	outFields->push(HX_HCSTRING("_color","\xa4","\xb8","\x43","\x46"));
	outFields->push(HX_HCSTRING("_active","\x65","\x53","\xbd","\x84"));
	outFields->push(HX_HCSTRING("_brightness","\xf0","\x5a","\xfb","\x37"));
	outFields->push(HX_HCSTRING("_lightBulb","\xc0","\x6a","\xe0","\x15"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LightSource_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(LightSource_obj,_type),HX_HCSTRING("_type","\x99","\x0e","\x1a","\x00")},
	{hx::fsInt,(int)offsetof(LightSource_obj,_color),HX_HCSTRING("_color","\xa4","\xb8","\x43","\x46")},
	{hx::fsBool,(int)offsetof(LightSource_obj,_active),HX_HCSTRING("_active","\x65","\x53","\xbd","\x84")},
	{hx::fsFloat,(int)offsetof(LightSource_obj,_brightness),HX_HCSTRING("_brightness","\xf0","\x5a","\xfb","\x37")},
	{hx::fsObject /*::starling::display::Image*/ ,(int)offsetof(LightSource_obj,_lightBulb),HX_HCSTRING("_lightBulb","\xc0","\x6a","\xe0","\x15")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo LightSource_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(void *) &LightSource_obj::LightBulbAtlas,HX_HCSTRING("LightBulbAtlas","\xec","\xa5","\xe4","\x51")},
	{hx::fsString,(void *) &LightSource_obj::ATLAS_TEXTURE_DATA_NAME,HX_HCSTRING("ATLAS_TEXTURE_DATA_NAME","\xa8","\xe0","\x80","\x51")},
	{hx::fsString,(void *) &LightSource_obj::TYPE_POINT,HX_HCSTRING("TYPE_POINT","\xab","\xb5","\xce","\xc3")},
	{hx::fsString,(void *) &LightSource_obj::TYPE_AMBIENT,HX_HCSTRING("TYPE_AMBIENT","\x33","\xca","\x87","\x15")},
	{hx::fsString,(void *) &LightSource_obj::TYPE_DIRECTIONAL,HX_HCSTRING("TYPE_DIRECTIONAL","\x85","\xa8","\x66","\xf1")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &LightSource_obj::sMovement,HX_HCSTRING("sMovement","\xc2","\x6c","\x5b","\x9c")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &LightSource_obj::sInstances,HX_HCSTRING("sInstances","\x4b","\x3c","\x61","\x4e")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &LightSource_obj::sRegion,HX_HCSTRING("sRegion","\xc7","\x8d","\x45","\xe3")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String LightSource_obj_sMemberFields[] = {
	HX_HCSTRING("_type","\x99","\x0e","\x1a","\x00"),
	HX_HCSTRING("_color","\xa4","\xb8","\x43","\x46"),
	HX_HCSTRING("_active","\x65","\x53","\xbd","\x84"),
	HX_HCSTRING("_brightness","\xf0","\x5a","\xfb","\x37"),
	HX_HCSTRING("_lightBulb","\xc0","\x6a","\xe0","\x15"),
	HX_HCSTRING("onAddedToStage","\x22","\x82","\x44","\x36"),
	HX_HCSTRING("onRemovedFromStage","\x73","\xcc","\x89","\x12"),
	HX_HCSTRING("onTouch","\x20","\xb6","\x70","\xaa"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_brightness","\x1a","\x16","\x67","\xdb"),
	HX_HCSTRING("set_brightness","\x8e","\xfe","\x86","\xfb"),
	HX_HCSTRING("get_showLightBulb","\x99","\xfd","\xcb","\xb0"),
	HX_HCSTRING("set_showLightBulb","\xa5","\xd5","\x39","\xd4"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_isActive","\x59","\x91","\xc9","\x23"),
	HX_HCSTRING("set_isActive","\xcd","\xb4","\xc2","\x38"),
	::String(null()) };

static void LightSource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LightSource_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(LightSource_obj::LightBulbAtlas,"LightBulbAtlas");
	HX_MARK_MEMBER_NAME(LightSource_obj::ATLAS_TEXTURE_DATA_NAME,"ATLAS_TEXTURE_DATA_NAME");
	HX_MARK_MEMBER_NAME(LightSource_obj::TYPE_POINT,"TYPE_POINT");
	HX_MARK_MEMBER_NAME(LightSource_obj::TYPE_AMBIENT,"TYPE_AMBIENT");
	HX_MARK_MEMBER_NAME(LightSource_obj::TYPE_DIRECTIONAL,"TYPE_DIRECTIONAL");
	HX_MARK_MEMBER_NAME(LightSource_obj::sMovement,"sMovement");
	HX_MARK_MEMBER_NAME(LightSource_obj::sInstances,"sInstances");
	HX_MARK_MEMBER_NAME(LightSource_obj::sRegion,"sRegion");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LightSource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LightSource_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(LightSource_obj::LightBulbAtlas,"LightBulbAtlas");
	HX_VISIT_MEMBER_NAME(LightSource_obj::ATLAS_TEXTURE_DATA_NAME,"ATLAS_TEXTURE_DATA_NAME");
	HX_VISIT_MEMBER_NAME(LightSource_obj::TYPE_POINT,"TYPE_POINT");
	HX_VISIT_MEMBER_NAME(LightSource_obj::TYPE_AMBIENT,"TYPE_AMBIENT");
	HX_VISIT_MEMBER_NAME(LightSource_obj::TYPE_DIRECTIONAL,"TYPE_DIRECTIONAL");
	HX_VISIT_MEMBER_NAME(LightSource_obj::sMovement,"sMovement");
	HX_VISIT_MEMBER_NAME(LightSource_obj::sInstances,"sInstances");
	HX_VISIT_MEMBER_NAME(LightSource_obj::sRegion,"sRegion");
};

#endif

hx::Class LightSource_obj::__mClass;

static ::String LightSource_obj_sStaticFields[] = {
	HX_HCSTRING("LightBulbAtlas","\xec","\xa5","\xe4","\x51"),
	HX_HCSTRING("ATLAS_TEXTURE_DATA_NAME","\xa8","\xe0","\x80","\x51"),
	HX_HCSTRING("TYPE_POINT","\xab","\xb5","\xce","\xc3"),
	HX_HCSTRING("TYPE_AMBIENT","\x33","\xca","\x87","\x15"),
	HX_HCSTRING("TYPE_DIRECTIONAL","\x85","\xa8","\x66","\xf1"),
	HX_HCSTRING("sMovement","\xc2","\x6c","\x5b","\x9c"),
	HX_HCSTRING("sInstances","\x4b","\x3c","\x61","\x4e"),
	HX_HCSTRING("sRegion","\xc7","\x8d","\x45","\xe3"),
	HX_HCSTRING("getBulbTexture","\xdc","\x17","\x26","\x0e"),
	HX_HCSTRING("getActiveInstances","\xa2","\x58","\xb5","\x32"),
	HX_HCSTRING("createPointLight","\x82","\x28","\xe8","\x89"),
	HX_HCSTRING("createAmbientLight","\xba","\x4e","\x90","\xbc"),
	HX_HCSTRING("createDirectionalLight","\xa8","\xe6","\xe9","\xc4"),
	::String(null())
};

void LightSource_obj::__register()
{
	hx::Object *dummy = new LightSource_obj;
	LightSource_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.extensions.lighting.LightSource","\x83","\xbf","\xb6","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LightSource_obj::__GetStatic;
	__mClass->mSetStaticField = &LightSource_obj::__SetStatic;
	__mClass->mMarkFunc = LightSource_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LightSource_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LightSource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LightSource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LightSource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LightSource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LightSource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LightSource_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_70_boot)
HXDLIN(  70)		ATLAS_TEXTURE_DATA_NAME = HX_("starling.extensions.lighting.LightSource.atlasTexture",9b,ca,15,dd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_73_boot)
HXDLIN(  73)		TYPE_POINT = HX_("point",50,b4,8f,c6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_76_boot)
HXDLIN(  76)		TYPE_AMBIENT = HX_("ambient",18,98,81,09);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_79_boot)
HXDLIN(  79)		TYPE_DIRECTIONAL = HX_("directional",ea,04,cd,ea);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f98633b61d5b8b80_88_boot)
HXDLIN(  88)		sMovement =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_f98633b61d5b8b80_89_boot)
HXDLIN(  89)		sInstances = ::openfl::utils::_Dictionary::Dictionary_Impl__obj::toStringMap(null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f98633b61d5b8b80_90_boot)
HXDLIN(  90)		sRegion =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace starling
} // end namespace extensions
} // end namespace lighting
