// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Sprite3D
#include <starling/display/Sprite3D.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_LightEffect
#include <starling/extensions/lighting/LightEffect.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_LightSource
#include <starling/extensions/lighting/LightSource.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_LightStyle
#include <starling/extensions/lighting/LightStyle.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_Material
#include <starling/extensions/lighting/Material.h>
#endif
#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_MeshEffect
#include <starling/rendering/MeshEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#include <starling/rendering/VertexDataFormat.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_053977b6930841cd_46_new,"starling.extensions.lighting.LightStyle","new",0xf255bcfb,"starling.extensions.lighting.LightStyle.new","starling/extensions/lighting/LightStyle.hx",46,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_85_setNormalTexCoords,"starling.extensions.lighting.LightStyle","setNormalTexCoords",0xb91c1a81,"starling.extensions.lighting.LightStyle.setNormalTexCoords","starling/extensions/lighting/LightStyle.hx",85,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_100_setTexCoords,"starling.extensions.lighting.LightStyle","setTexCoords",0x1f3a4568,"starling.extensions.lighting.LightStyle.setTexCoords","starling/extensions/lighting/LightStyle.hx",100,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_110_copyFrom,"starling.extensions.lighting.LightStyle","copyFrom",0x25388d44,"starling.extensions.lighting.LightStyle.copyFrom","starling/extensions/lighting/LightStyle.hx",110,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_124_batchVertexData,"starling.extensions.lighting.LightStyle","batchVertexData",0x172c6123,"starling.extensions.lighting.LightStyle.batchVertexData","starling/extensions/lighting/LightStyle.hx",124,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_163_canBatchWith,"starling.extensions.lighting.LightStyle","canBatchWith",0xd1ab80b5,"starling.extensions.lighting.LightStyle.canBatchWith","starling/extensions/lighting/LightStyle.hx",163,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_194_createEffect,"starling.extensions.lighting.LightStyle","createEffect",0xdc6fc2b2,"starling.extensions.lighting.LightStyle.createEffect","starling/extensions/lighting/LightStyle.hx",194,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_199_updateEffect,"starling.extensions.lighting.LightStyle","updateEffect",0xb9de297f,"starling.extensions.lighting.LightStyle.updateEffect","starling/extensions/lighting/LightStyle.hx",199,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_257_get_vertexFormat,"starling.extensions.lighting.LightStyle","get_vertexFormat",0x6b6e7cc9,"starling.extensions.lighting.LightStyle.get_vertexFormat","starling/extensions/lighting/LightStyle.hx",257,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_262_onTargetAssigned,"starling.extensions.lighting.LightStyle","onTargetAssigned",0xf5f5ccc3,"starling.extensions.lighting.LightStyle.onTargetAssigned","starling/extensions/lighting/LightStyle.hx",262,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_279_get_normalTexture,"starling.extensions.lighting.LightStyle","get_normalTexture",0x7c3ad2a6,"starling.extensions.lighting.LightStyle.get_normalTexture","starling/extensions/lighting/LightStyle.hx",279,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_282_set_normalTexture,"starling.extensions.lighting.LightStyle","set_normalTexture",0x9fa8aab2,"starling.extensions.lighting.LightStyle.set_normalTexture","starling/extensions/lighting/LightStyle.hx",282,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_304_setVertexMaterial,"starling.extensions.lighting.LightStyle","setVertexMaterial",0x49012548,"starling.extensions.lighting.LightStyle.setVertexMaterial","starling/extensions/lighting/LightStyle.hx",304,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_310_getVertexMaterial,"starling.extensions.lighting.LightStyle","getVertexMaterial",0x25934d3c,"starling.extensions.lighting.LightStyle.getVertexMaterial","starling/extensions/lighting/LightStyle.hx",310,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_323_getAmbientRatio,"starling.extensions.lighting.LightStyle","getAmbientRatio",0x7343f4a4,"starling.extensions.lighting.LightStyle.getAmbientRatio","starling/extensions/lighting/LightStyle.hx",323,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_329_setAmbientRatio,"starling.extensions.lighting.LightStyle","setAmbientRatio",0x6f0f71b0,"starling.extensions.lighting.LightStyle.setAmbientRatio","starling/extensions/lighting/LightStyle.hx",329,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_343_getDiffuseRatio,"starling.extensions.lighting.LightStyle","getDiffuseRatio",0x21163f1a,"starling.extensions.lighting.LightStyle.getDiffuseRatio","starling/extensions/lighting/LightStyle.hx",343,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_349_setDiffuseRatio,"starling.extensions.lighting.LightStyle","setDiffuseRatio",0x1ce1bc26,"starling.extensions.lighting.LightStyle.setDiffuseRatio","starling/extensions/lighting/LightStyle.hx",349,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_363_getSpecularRatio,"starling.extensions.lighting.LightStyle","getSpecularRatio",0xd851a357,"starling.extensions.lighting.LightStyle.getSpecularRatio","starling/extensions/lighting/LightStyle.hx",363,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_369_setSpecularRatio,"starling.extensions.lighting.LightStyle","setSpecularRatio",0x2e9390cb,"starling.extensions.lighting.LightStyle.setSpecularRatio","starling/extensions/lighting/LightStyle.hx",369,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_383_getShininess,"starling.extensions.lighting.LightStyle","getShininess",0x2f631c15,"starling.extensions.lighting.LightStyle.getShininess","starling/extensions/lighting/LightStyle.hx",383,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_389_setShininess,"starling.extensions.lighting.LightStyle","setShininess",0x445c3f89,"starling.extensions.lighting.LightStyle.setShininess","starling/extensions/lighting/LightStyle.hx",389,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_403_get_ambientRatio,"starling.extensions.lighting.LightStyle","get_ambientRatio",0xff64b0e1,"starling.extensions.lighting.LightStyle.get_ambientRatio","starling/extensions/lighting/LightStyle.hx",403,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_406_set_ambientRatio,"starling.extensions.lighting.LightStyle","set_ambientRatio",0x55a69e55,"starling.extensions.lighting.LightStyle.set_ambientRatio","starling/extensions/lighting/LightStyle.hx",406,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_426_get_diffuseRatio,"starling.extensions.lighting.LightStyle","get_diffuseRatio",0xad36fb57,"starling.extensions.lighting.LightStyle.get_diffuseRatio","starling/extensions/lighting/LightStyle.hx",426,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_429_set_diffuseRatio,"starling.extensions.lighting.LightStyle","set_diffuseRatio",0x0378e8cb,"starling.extensions.lighting.LightStyle.set_diffuseRatio","starling/extensions/lighting/LightStyle.hx",429,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_448_get_specularRatio,"starling.extensions.lighting.LightStyle","get_specularRatio",0xe8d59c7a,"starling.extensions.lighting.LightStyle.get_specularRatio","starling/extensions/lighting/LightStyle.hx",448,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_451_set_specularRatio,"starling.extensions.lighting.LightStyle","set_specularRatio",0x0c437486,"starling.extensions.lighting.LightStyle.set_specularRatio","starling/extensions/lighting/LightStyle.hx",451,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_471_get_shininess,"starling.extensions.lighting.LightStyle","get_shininess",0x76c507b8,"starling.extensions.lighting.LightStyle.get_shininess","starling/extensions/lighting/LightStyle.hx",471,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_474_set_shininess,"starling.extensions.lighting.LightStyle","set_shininess",0xbbcae9c4,"starling.extensions.lighting.LightStyle.set_shininess","starling/extensions/lighting/LightStyle.hx",474,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_54_boot,"starling.extensions.lighting.LightStyle","boot",0x10c89f37,"starling.extensions.lighting.LightStyle.boot","starling/extensions/lighting/LightStyle.hx",54,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_57_boot,"starling.extensions.lighting.LightStyle","boot",0x10c89f37,"starling.extensions.lighting.LightStyle.boot","starling/extensions/lighting/LightStyle.hx",57,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_053977b6930841cd_60_boot,"starling.extensions.lighting.LightStyle","boot",0x10c89f37,"starling.extensions.lighting.LightStyle.boot","starling/extensions/lighting/LightStyle.hx",60,0x868633d4)
namespace starling{
namespace extensions{
namespace lighting{

void LightStyle_obj::__construct( ::starling::textures::Texture normalTexture){
            	HX_GC_STACKFRAME(&_hx_pos_053977b6930841cd_46_new)
HXLINE(  72)		this->sLights = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  71)		this->sMaterial =  ::starling::extensions::lighting::Material_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  70)		this->sMatrixAlt3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE(  69)		this->sMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE(  68)		this->sMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  67)		this->sPoint3D =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  66)		this->sPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  77)		super::__construct();
HXLINE(  78)		this->_normalTexture = normalTexture;
HXLINE(  79)		this->_material =  ::starling::extensions::lighting::Material_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic LightStyle_obj::__CreateEmpty() { return new LightStyle_obj; }

void *LightStyle_obj::_hx_vtable = 0;

Dynamic LightStyle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LightStyle_obj > _hx_result = new LightStyle_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LightStyle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5759bdd6) {
		if (inClassId<=(int)0x25137bc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
		} else {
			return inClassId==(int)0x5759bdd6;
		}
	} else {
		return inClassId==(int)0x5ed02a83;
	}
}

void LightStyle_obj::setNormalTexCoords(int vertexID,Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_85_setNormalTexCoords)
HXLINE(  86)		if (hx::IsNotNull( this->_normalTexture )) {
HXLINE(  88)			 ::starling::textures::Texture _hx_tmp = this->_normalTexture;
HXDLIN(  88)			_hx_tmp->setTexCoords(this->get_vertexData(),vertexID,HX_("normalTexCoords",3e,ce,76,b2),u,v);
            		}
            		else {
HXLINE(  92)			this->get_vertexData()->setPoint(vertexID,HX_("normalTexCoords",3e,ce,76,b2),u,v);
            		}
HXLINE(  95)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC3(LightStyle_obj,setNormalTexCoords,(void))

void LightStyle_obj::setTexCoords(int vertexID,Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_100_setTexCoords)
HXLINE( 104)		this->setNormalTexCoords(vertexID,u,v);
HXLINE( 105)		this->super::setTexCoords(vertexID,u,v);
            	}


void LightStyle_obj::copyFrom( ::starling::styles::MeshStyle meshStyle){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_110_copyFrom)
HXLINE( 111)		 ::starling::extensions::lighting::LightStyle litMeshStyle;
HXDLIN( 111)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 111)			litMeshStyle = hx::TCast<  ::starling::extensions::lighting::LightStyle >::cast(meshStyle);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 111)				litMeshStyle = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 112)		if (hx::IsNotNull( litMeshStyle )) {
HXLINE( 114)			this->_normalTexture = litMeshStyle->_normalTexture;
HXLINE( 115)			this->_material->copyFrom(litMeshStyle->_material);
            		}
HXLINE( 117)		this->super::copyFrom(meshStyle);
            	}


void LightStyle_obj::batchVertexData( ::starling::styles::MeshStyle targetStyle,hx::Null< int >  __o_targetVertexID, ::openfl::geom::Matrix matrix,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int targetVertexID = __o_targetVertexID.Default(0);
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_124_batchVertexData)
HXLINE( 125)		this->super::batchVertexData(targetStyle,targetVertexID,matrix,vertexID,numVertices);
HXLINE( 127)		if (hx::IsNotNull( matrix )) {
HXLINE( 133)			 ::starling::extensions::lighting::LightStyle targetLightStyle;
HXDLIN( 133)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 133)				targetLightStyle = hx::TCast<  ::starling::extensions::lighting::LightStyle >::cast(targetStyle);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 133)					targetLightStyle = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 134)			 ::starling::rendering::VertexData targetVertexData = targetLightStyle->get_vertexData();
HXLINE( 136)			this->sMatrix->setTo(matrix->a,matrix->b,matrix->c,matrix->d,(int)0,(int)0);
HXLINE( 137)			this->get_vertexData()->copyAttributeTo(targetVertexData,targetVertexID,HX_("xAxis",39,e5,67,43),this->sMatrix,vertexID,numVertices);
HXLINE( 138)			this->get_vertexData()->copyAttributeTo(targetVertexData,targetVertexID,HX_("yAxis",ba,79,ce,d6),this->sMatrix,vertexID,numVertices);
HXLINE( 140)			if (((matrix->a * matrix->d) < (int)0)) {
HXLINE( 147)				if ((numVertices < (int)0)) {
HXLINE( 149)					numVertices = (this->get_vertexData()->get_numVertices() - vertexID);
            				}
HXLINE( 152)				{
HXLINE( 152)					int _g1 = (int)0;
HXDLIN( 152)					int _g = numVertices;
HXDLIN( 152)					while((_g1 < _g)){
HXLINE( 152)						_g1 = (_g1 + (int)1);
HXDLIN( 152)						int i = (_g1 - (int)1);
HXLINE( 154)						 ::starling::rendering::VertexData zScale = this->get_vertexData();
HXDLIN( 154)						Float zScale1 = zScale->getFloat((vertexID + i),HX_("zScale",b0,43,86,d3));
HXLINE( 155)						targetVertexData->setFloat((targetVertexID + i),HX_("zScale",b0,43,86,d3),(zScale1 * (int)-1));
            					}
            				}
            			}
            		}
            	}


bool LightStyle_obj::canBatchWith( ::starling::styles::MeshStyle meshStyle){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_163_canBatchWith)
HXLINE( 164)		 ::starling::extensions::lighting::LightStyle litMeshStyle;
HXDLIN( 164)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 164)			litMeshStyle = hx::TCast<  ::starling::extensions::lighting::LightStyle >::cast(meshStyle);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 164)				litMeshStyle = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 165)		bool _hx_tmp;
HXDLIN( 165)		if (hx::IsNotNull( litMeshStyle )) {
HXLINE( 165)			_hx_tmp = this->super::canBatchWith(meshStyle);
            		}
            		else {
HXLINE( 165)			_hx_tmp = false;
            		}
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 167)			 ::starling::textures::Texture newNormalTexture = litMeshStyle->_normalTexture;
HXLINE( 169)			bool _hx_tmp1;
HXDLIN( 169)			if (hx::IsNull( this->_normalTexture )) {
HXLINE( 169)				_hx_tmp1 = hx::IsNull( newNormalTexture );
            			}
            			else {
HXLINE( 169)				_hx_tmp1 = false;
            			}
HXDLIN( 169)			if (_hx_tmp1) {
HXLINE( 171)				return true;
            			}
            			else {
HXLINE( 175)				bool _hx_tmp2;
HXDLIN( 175)				if (hx::IsNotNull( this->_normalTexture )) {
HXLINE( 175)					_hx_tmp2 = hx::IsNotNull( newNormalTexture );
            				}
            				else {
HXLINE( 175)					_hx_tmp2 = false;
            				}
HXDLIN( 175)				if (_hx_tmp2) {
HXLINE( 177)					 ::openfl::display3D::textures::TextureBase _hx_tmp3 = this->_normalTexture->get_base();
HXDLIN( 177)					return hx::IsEq( _hx_tmp3,newNormalTexture->get_base() );
            				}
            				else {
HXLINE( 181)					return false;
            				}
            			}
            		}
            		else {
HXLINE( 187)			return false;
            		}
HXLINE( 165)		return false;
            	}


 ::starling::rendering::MeshEffect LightStyle_obj::createEffect(){
            	HX_GC_STACKFRAME(&_hx_pos_053977b6930841cd_194_createEffect)
HXDLIN( 194)		return  ::starling::extensions::lighting::LightEffect_obj::__alloc( HX_CTX );
            	}


void LightStyle_obj::updateEffect( ::starling::rendering::MeshEffect effect, ::starling::rendering::RenderState state){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_199_updateEffect)
HXLINE( 200)		 ::starling::extensions::lighting::LightEffect lightEffect;
HXDLIN( 200)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 200)			lightEffect = hx::TCast<  ::starling::extensions::lighting::LightEffect >::cast(effect);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 200)				lightEffect = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 201)		lightEffect->set_normalTexture(this->_normalTexture);
HXLINE( 203)		 ::starling::display::Stage stage;
HXDLIN( 203)		if (hx::IsNotNull( this->get_target()->get_stage() )) {
HXLINE( 203)			stage = this->get_target()->get_stage();
            		}
            		else {
HXLINE( 203)			stage = ::starling::core::Starling_obj::get_current()->get_stage();
            		}
HXLINE( 204)		::Array< ::Dynamic> lights = ::starling::extensions::lighting::LightSource_obj::getActiveInstances(stage,this->sLights);
HXLINE( 205)		lightEffect->set_numLights(lights->length);
HXLINE( 208)		if (state->get_is3D()) {
HXLINE( 210)			 ::openfl::geom::Matrix3D _hx_tmp = this->sMatrixAlt3D;
HXDLIN( 210)			_hx_tmp->copyFrom(state->get_modelviewMatrix3D());
            		}
            		else {
HXLINE( 214)			 ::openfl::geom::Matrix _hx_tmp1 = state->get_modelviewMatrix();
HXDLIN( 214)			::starling::utils::MatrixUtil_obj::convertTo3D(_hx_tmp1,this->sMatrixAlt3D);
            		}
HXLINE( 216)		this->sMatrixAlt3D->invert();
HXLINE( 219)		 ::openfl::geom::Vector3D _hx_tmp2 = this->sPoint3D;
HXDLIN( 219)		_hx_tmp2->copyFrom(stage->get_cameraPosition());
HXLINE( 220)		 ::openfl::geom::Matrix3D _hx_tmp3 = this->sMatrixAlt3D;
HXDLIN( 220)		 ::openfl::geom::Vector3D _hx_tmp4 = this->sPoint3D;
HXDLIN( 220)		::starling::utils::MatrixUtil_obj::transformPoint3D(_hx_tmp3,_hx_tmp4,lightEffect->get_cameraPosition());
HXLINE( 222)		{
HXLINE( 222)			int _g1 = (int)0;
HXDLIN( 222)			int _g = lights->length;
HXDLIN( 222)			while((_g1 < _g)){
HXLINE( 222)				_g1 = (_g1 + (int)1);
HXDLIN( 222)				int i = (_g1 - (int)1);
HXLINE( 224)				 ::starling::extensions::lighting::LightSource light = lights->__get(i).StaticCast<  ::starling::extensions::lighting::LightSource >();
HXLINE( 225)				int lightColor = light->get_color();
HXDLIN( 225)				int lightColor1 = ::starling::utils::Color_obj::multiply(lightColor,light->get_brightness());
HXLINE( 226)				 ::openfl::geom::Vector3D lightPosOrDir;
HXLINE( 229)				light->getTransformationMatrix3D(null(),this->sMatrix3D);
HXLINE( 230)				this->sMatrix3D->append(this->sMatrixAlt3D);
HXLINE( 232)				if ((light->get_type() == HX_("point",50,b4,8f,c6))) {
HXLINE( 234)					lightPosOrDir = ::starling::utils::MatrixUtil_obj::transformCoords3D(this->sMatrix3D,(int)0,(int)0,(int)0,this->sPoint3D);
            				}
            				else {
HXLINE( 241)					this->sPoint3D->setTo((int)0,(int)0,(int)0);
HXLINE( 242)					this->sMatrix3D->copyColumnFrom((int)3,this->sPoint3D);
HXLINE( 243)					lightPosOrDir = ::starling::utils::MatrixUtil_obj::transformCoords3D(this->sMatrix3D,(int)-1,(int)0,(int)0,this->sPoint3D);
            				}
HXLINE( 248)				lightEffect->setLightAt(i,light->get_type(),lightColor1,lightPosOrDir);
            			}
            		}
HXLINE( 251)		this->super::updateEffect(effect,state);
            	}


 ::starling::rendering::VertexDataFormat LightStyle_obj::get_vertexFormat(){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_257_get_vertexFormat)
HXDLIN( 257)		return ::starling::extensions::lighting::LightStyle_obj::VERTEX_FORMAT;
            	}


void LightStyle_obj::onTargetAssigned( ::starling::display::Mesh target){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_262_onTargetAssigned)
HXLINE( 263)		int numVertices = this->get_vertexData()->get_numVertices();
HXLINE( 265)		{
HXLINE( 265)			int _g1 = (int)0;
HXDLIN( 265)			int _g = numVertices;
HXDLIN( 265)			while((_g1 < _g)){
HXLINE( 265)				_g1 = (_g1 + (int)1);
HXDLIN( 265)				int i = (_g1 - (int)1);
HXLINE( 267)				this->getTexCoords(i,this->sPoint);
HXLINE( 268)				this->setNormalTexCoords(i,this->sPoint->x,this->sPoint->y);
HXLINE( 269)				this->setVertexMaterial(i,this->_material);
HXLINE( 270)				this->get_vertexData()->setPoint(i,HX_("xAxis",39,e5,67,43),(int)1,(int)0);
HXLINE( 271)				this->get_vertexData()->setPoint(i,HX_("yAxis",ba,79,ce,d6),(int)0,(int)1);
HXLINE( 272)				this->get_vertexData()->setFloat(i,HX_("zScale",b0,43,86,d3),(int)1);
            			}
            		}
            	}


 ::starling::textures::Texture LightStyle_obj::get_normalTexture(){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_279_get_normalTexture)
HXDLIN( 279)		return this->_normalTexture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightStyle_obj,get_normalTexture,return )

 ::starling::textures::Texture LightStyle_obj::set_normalTexture( ::starling::textures::Texture value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_282_set_normalTexture)
HXLINE( 283)		if (hx::IsNotEq( value,this->_normalTexture )) {
HXLINE( 285)			if (hx::IsNotNull( this->get_target() )) {
HXLINE( 287)				int _g1 = (int)0;
HXDLIN( 287)				int _g = this->get_vertexData()->get_numVertices();
HXDLIN( 287)				while((_g1 < _g)){
HXLINE( 287)					_g1 = (_g1 + (int)1);
HXDLIN( 287)					int i = (_g1 - (int)1);
HXLINE( 289)					this->getTexCoords(i,this->sPoint);
HXLINE( 290)					if (hx::IsNotNull( value )) {
HXLINE( 292)						 ::starling::rendering::VertexData _hx_tmp = this->get_vertexData();
HXDLIN( 292)						value->setTexCoords(_hx_tmp,i,HX_("normalTexCoords",3e,ce,76,b2),this->sPoint->x,this->sPoint->y);
            					}
            				}
            			}
HXLINE( 297)			this->_normalTexture = value;
HXLINE( 298)			this->setRequiresRedraw();
            		}
HXLINE( 300)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,set_normalTexture,return )

void LightStyle_obj::setVertexMaterial(int vertexID, ::starling::extensions::lighting::Material material){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_304_setVertexMaterial)
HXLINE( 305)		 ::starling::rendering::VertexData _hx_tmp = this->get_vertexData();
HXDLIN( 305)		_hx_tmp->setUnsignedInt(vertexID,HX_("material",a7,5c,a5,f0),material->encode());
HXLINE( 306)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightStyle_obj,setVertexMaterial,(void))

 ::starling::extensions::lighting::Material LightStyle_obj::getVertexMaterial(int vertexID, ::starling::extensions::lighting::Material out){
            	HX_GC_STACKFRAME(&_hx_pos_053977b6930841cd_310_getVertexMaterial)
HXLINE( 311)		if (hx::IsNull( out )) {
HXLINE( 313)			out =  ::starling::extensions::lighting::Material_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 315)		out->decode(this->get_vertexData()->getUnsignedInt(vertexID,HX_("material",a7,5c,a5,f0)));
HXLINE( 316)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightStyle_obj,getVertexMaterial,return )

Float LightStyle_obj::getAmbientRatio(int vertexID){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_323_getAmbientRatio)
HXDLIN( 323)		return this->getVertexMaterial(vertexID,null())->ambientRatio;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,getAmbientRatio,return )

void LightStyle_obj::setAmbientRatio(int vertexID,Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_329_setAmbientRatio)
HXLINE( 330)		this->getVertexMaterial(vertexID,this->sMaterial);
HXLINE( 332)		if ((this->sMaterial->ambientRatio != value)) {
HXLINE( 334)			this->sMaterial->ambientRatio = value;
HXLINE( 335)			this->setVertexMaterial(vertexID,this->sMaterial);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightStyle_obj,setAmbientRatio,(void))

Float LightStyle_obj::getDiffuseRatio(int vertexID){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_343_getDiffuseRatio)
HXDLIN( 343)		return this->getVertexMaterial(vertexID,null())->diffuseRatio;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,getDiffuseRatio,return )

void LightStyle_obj::setDiffuseRatio(int vertexID,Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_349_setDiffuseRatio)
HXLINE( 350)		this->getVertexMaterial(vertexID,this->sMaterial);
HXLINE( 352)		if ((this->sMaterial->diffuseRatio != value)) {
HXLINE( 354)			this->sMaterial->diffuseRatio = value;
HXLINE( 355)			this->setVertexMaterial(vertexID,this->sMaterial);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightStyle_obj,setDiffuseRatio,(void))

Float LightStyle_obj::getSpecularRatio(int vertexID){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_363_getSpecularRatio)
HXDLIN( 363)		return this->getVertexMaterial(vertexID,null())->specularRatio;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,getSpecularRatio,return )

void LightStyle_obj::setSpecularRatio(int vertexID,Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_369_setSpecularRatio)
HXLINE( 370)		this->getVertexMaterial(vertexID,this->sMaterial);
HXLINE( 372)		if ((this->sMaterial->specularRatio != value)) {
HXLINE( 374)			this->sMaterial->specularRatio = value;
HXLINE( 375)			this->setVertexMaterial(vertexID,this->sMaterial);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightStyle_obj,setSpecularRatio,(void))

Float LightStyle_obj::getShininess(int vertexID){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_383_getShininess)
HXDLIN( 383)		return this->getVertexMaterial(vertexID,null())->shininess;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,getShininess,return )

void LightStyle_obj::setShininess(int vertexID,Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_389_setShininess)
HXLINE( 390)		this->getVertexMaterial(vertexID,this->sMaterial);
HXLINE( 392)		if ((this->sMaterial->shininess != value)) {
HXLINE( 394)			this->sMaterial->shininess = value;
HXLINE( 395)			this->setVertexMaterial(vertexID,this->sMaterial);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightStyle_obj,setShininess,(void))

Float LightStyle_obj::get_ambientRatio(){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_403_get_ambientRatio)
HXDLIN( 403)		return this->getAmbientRatio((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightStyle_obj,get_ambientRatio,return )

Float LightStyle_obj::set_ambientRatio(Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_406_set_ambientRatio)
HXLINE( 407)		this->_material->ambientRatio = value;
HXLINE( 409)		if (hx::IsNotNull( this->get_vertexData() )) {
HXLINE( 411)			int i = (int)0;
HXLINE( 412)			int len = this->get_vertexData()->get_numVertices();
HXLINE( 413)			while((i < len)){
HXLINE( 415)				this->setAmbientRatio(i,value);
HXLINE( 416)				i = (i + (int)1);
            			}
            		}
HXLINE( 419)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,set_ambientRatio,return )

Float LightStyle_obj::get_diffuseRatio(){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_426_get_diffuseRatio)
HXDLIN( 426)		return this->getDiffuseRatio((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightStyle_obj,get_diffuseRatio,return )

Float LightStyle_obj::set_diffuseRatio(Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_429_set_diffuseRatio)
HXLINE( 430)		this->_material->diffuseRatio = value;
HXLINE( 432)		if (hx::IsNotNull( this->get_vertexData() )) {
HXLINE( 434)			int i = (int)0;
HXLINE( 435)			int len = this->get_vertexData()->get_numVertices();
HXLINE( 436)			while((i < len)){
HXLINE( 438)				this->setDiffuseRatio(i,value);
HXLINE( 439)				i = (i + (int)1);
            			}
            		}
HXLINE( 442)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,set_diffuseRatio,return )

Float LightStyle_obj::get_specularRatio(){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_448_get_specularRatio)
HXDLIN( 448)		return this->getSpecularRatio((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightStyle_obj,get_specularRatio,return )

Float LightStyle_obj::set_specularRatio(Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_451_set_specularRatio)
HXLINE( 452)		this->_material->specularRatio = value;
HXLINE( 454)		if (hx::IsNotNull( this->get_vertexData() )) {
HXLINE( 456)			int i = (int)0;
HXLINE( 457)			int len = this->get_vertexData()->get_numVertices();
HXLINE( 458)			while((i < len)){
HXLINE( 460)				this->setSpecularRatio(i,value);
HXLINE( 461)				i = (i + (int)1);
            			}
            		}
HXLINE( 464)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,set_specularRatio,return )

Float LightStyle_obj::get_shininess(){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_471_get_shininess)
HXDLIN( 471)		return this->getShininess((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightStyle_obj,get_shininess,return )

Float LightStyle_obj::set_shininess(Float value){
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_474_set_shininess)
HXLINE( 475)		this->_material->shininess = value;
HXLINE( 477)		if (hx::IsNotNull( this->get_vertexData() )) {
HXLINE( 479)			int i = (int)0;
HXLINE( 480)			int len = this->get_vertexData()->get_numVertices();
HXLINE( 481)			while((i < len)){
HXLINE( 483)				this->setShininess(i,value);
HXLINE( 484)				i = (i + (int)1);
            			}
            		}
HXLINE( 487)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightStyle_obj,set_shininess,return )

 ::starling::rendering::VertexDataFormat LightStyle_obj::VERTEX_FORMAT;

int LightStyle_obj::MAX_SHININESS;

int LightStyle_obj::MAX_NUM_LIGHTS;


hx::ObjectPtr< LightStyle_obj > LightStyle_obj::__new( ::starling::textures::Texture normalTexture) {
	hx::ObjectPtr< LightStyle_obj > __this = new LightStyle_obj();
	__this->__construct(normalTexture);
	return __this;
}

hx::ObjectPtr< LightStyle_obj > LightStyle_obj::__alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture normalTexture) {
	LightStyle_obj *__this = (LightStyle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LightStyle_obj), true, "starling.extensions.lighting.LightStyle"));
	*(void **)__this = LightStyle_obj::_hx_vtable;
	__this->__construct(normalTexture);
	return __this;
}

LightStyle_obj::LightStyle_obj()
{
}

void LightStyle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LightStyle);
	HX_MARK_MEMBER_NAME(_normalTexture,"_normalTexture");
	HX_MARK_MEMBER_NAME(_material,"_material");
	HX_MARK_MEMBER_NAME(sPoint,"sPoint");
	HX_MARK_MEMBER_NAME(sPoint3D,"sPoint3D");
	HX_MARK_MEMBER_NAME(sMatrix,"sMatrix");
	HX_MARK_MEMBER_NAME(sMatrix3D,"sMatrix3D");
	HX_MARK_MEMBER_NAME(sMatrixAlt3D,"sMatrixAlt3D");
	HX_MARK_MEMBER_NAME(sMaterial,"sMaterial");
	HX_MARK_MEMBER_NAME(sLights,"sLights");
	 ::starling::styles::MeshStyle_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LightStyle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_normalTexture,"_normalTexture");
	HX_VISIT_MEMBER_NAME(_material,"_material");
	HX_VISIT_MEMBER_NAME(sPoint,"sPoint");
	HX_VISIT_MEMBER_NAME(sPoint3D,"sPoint3D");
	HX_VISIT_MEMBER_NAME(sMatrix,"sMatrix");
	HX_VISIT_MEMBER_NAME(sMatrix3D,"sMatrix3D");
	HX_VISIT_MEMBER_NAME(sMatrixAlt3D,"sMatrixAlt3D");
	HX_VISIT_MEMBER_NAME(sMaterial,"sMaterial");
	HX_VISIT_MEMBER_NAME(sLights,"sLights");
	 ::starling::styles::MeshStyle_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LightStyle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sPoint") ) { return hx::Val( sPoint ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { return hx::Val( sMatrix ); }
		if (HX_FIELD_EQ(inName,"sLights") ) { return hx::Val( sLights ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sPoint3D") ) { return hx::Val( sPoint3D ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"shininess") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shininess() ); }
		if (HX_FIELD_EQ(inName,"_material") ) { return hx::Val( _material ); }
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { return hx::Val( sMatrix3D ); }
		if (HX_FIELD_EQ(inName,"sMaterial") ) { return hx::Val( sMaterial ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ambientRatio") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_ambientRatio() ); }
		if (HX_FIELD_EQ(inName,"diffuseRatio") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_diffuseRatio() ); }
		if (HX_FIELD_EQ(inName,"sMatrixAlt3D") ) { return hx::Val( sMatrixAlt3D ); }
		if (HX_FIELD_EQ(inName,"setTexCoords") ) { return hx::Val( setTexCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"canBatchWith") ) { return hx::Val( canBatchWith_dyn() ); }
		if (HX_FIELD_EQ(inName,"createEffect") ) { return hx::Val( createEffect_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateEffect") ) { return hx::Val( updateEffect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getShininess") ) { return hx::Val( getShininess_dyn() ); }
		if (HX_FIELD_EQ(inName,"setShininess") ) { return hx::Val( setShininess_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"normalTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_normalTexture() ); }
		if (HX_FIELD_EQ(inName,"specularRatio") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_specularRatio() ); }
		if (HX_FIELD_EQ(inName,"get_shininess") ) { return hx::Val( get_shininess_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shininess") ) { return hx::Val( set_shininess_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_normalTexture") ) { return hx::Val( _normalTexture ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"batchVertexData") ) { return hx::Val( batchVertexData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAmbientRatio") ) { return hx::Val( getAmbientRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAmbientRatio") ) { return hx::Val( setAmbientRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDiffuseRatio") ) { return hx::Val( getDiffuseRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDiffuseRatio") ) { return hx::Val( setDiffuseRatio_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_vertexFormat") ) { return hx::Val( get_vertexFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTargetAssigned") ) { return hx::Val( onTargetAssigned_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSpecularRatio") ) { return hx::Val( getSpecularRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSpecularRatio") ) { return hx::Val( setSpecularRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ambientRatio") ) { return hx::Val( get_ambientRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ambientRatio") ) { return hx::Val( set_ambientRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_diffuseRatio") ) { return hx::Val( get_diffuseRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_diffuseRatio") ) { return hx::Val( set_diffuseRatio_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_normalTexture") ) { return hx::Val( get_normalTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_normalTexture") ) { return hx::Val( set_normalTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexMaterial") ) { return hx::Val( setVertexMaterial_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexMaterial") ) { return hx::Val( getVertexMaterial_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_specularRatio") ) { return hx::Val( get_specularRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_specularRatio") ) { return hx::Val( set_specularRatio_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setNormalTexCoords") ) { return hx::Val( setNormalTexCoords_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LightStyle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { outValue = ( VERTEX_FORMAT ); return true; }
	}
	return false;
}

hx::Val LightStyle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sPoint") ) { sPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { sMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sLights") ) { sLights=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sPoint3D") ) { sPoint3D=inValue.Cast<  ::openfl::geom::Vector3D >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"shininess") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shininess(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_material") ) { _material=inValue.Cast<  ::starling::extensions::lighting::Material >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { sMatrix3D=inValue.Cast<  ::openfl::geom::Matrix3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sMaterial") ) { sMaterial=inValue.Cast<  ::starling::extensions::lighting::Material >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ambientRatio") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ambientRatio(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"diffuseRatio") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_diffuseRatio(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"sMatrixAlt3D") ) { sMatrixAlt3D=inValue.Cast<  ::openfl::geom::Matrix3D >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"normalTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_normalTexture(inValue.Cast<  ::starling::textures::Texture >()) ); }
		if (HX_FIELD_EQ(inName,"specularRatio") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_specularRatio(inValue.Cast< Float >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_normalTexture") ) { _normalTexture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool LightStyle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { VERTEX_FORMAT=ioValue.Cast<  ::starling::rendering::VertexDataFormat >(); return true; }
	}
	return false;
}

void LightStyle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("normalTexture","\x74","\x21","\x6a","\x38"));
	outFields->push(HX_HCSTRING("ambientRatio","\xd3","\xb5","\x99","\x31"));
	outFields->push(HX_HCSTRING("diffuseRatio","\x49","\x00","\x6c","\xdf"));
	outFields->push(HX_HCSTRING("specularRatio","\x48","\xeb","\x04","\xa5"));
	outFields->push(HX_HCSTRING("shininess","\x86","\x57","\x95","\xc6"));
	outFields->push(HX_HCSTRING("_normalTexture","\xb5","\x11","\xbc","\x76"));
	outFields->push(HX_HCSTRING("_material","\x06","\x54","\x3b","\x38"));
	outFields->push(HX_HCSTRING("sPoint","\xdd","\xa2","\xc7","\x54"));
	outFields->push(HX_HCSTRING("sPoint3D","\xce","\x00","\x1c","\xd0"));
	outFields->push(HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e"));
	outFields->push(HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03"));
	outFields->push(HX_HCSTRING("sMatrixAlt3D","\x66","\x46","\xde","\xf3"));
	outFields->push(HX_HCSTRING("sMaterial","\x3a","\x44","\xc9","\x8c"));
	outFields->push(HX_HCSTRING("sLights","\xb0","\xf7","\xba","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LightStyle_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(LightStyle_obj,_normalTexture),HX_HCSTRING("_normalTexture","\xb5","\x11","\xbc","\x76")},
	{hx::fsObject /*::starling::extensions::lighting::Material*/ ,(int)offsetof(LightStyle_obj,_material),HX_HCSTRING("_material","\x06","\x54","\x3b","\x38")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(LightStyle_obj,sPoint),HX_HCSTRING("sPoint","\xdd","\xa2","\xc7","\x54")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(int)offsetof(LightStyle_obj,sPoint3D),HX_HCSTRING("sPoint3D","\xce","\x00","\x1c","\xd0")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(LightStyle_obj,sMatrix),HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(int)offsetof(LightStyle_obj,sMatrix3D),HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(int)offsetof(LightStyle_obj,sMatrixAlt3D),HX_HCSTRING("sMatrixAlt3D","\x66","\x46","\xde","\xf3")},
	{hx::fsObject /*::starling::extensions::lighting::Material*/ ,(int)offsetof(LightStyle_obj,sMaterial),HX_HCSTRING("sMaterial","\x3a","\x44","\xc9","\x8c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(LightStyle_obj,sLights),HX_HCSTRING("sLights","\xb0","\xf7","\xba","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo LightStyle_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::starling::rendering::VertexDataFormat*/ ,(void *) &LightStyle_obj::VERTEX_FORMAT,HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29")},
	{hx::fsInt,(void *) &LightStyle_obj::MAX_SHININESS,HX_HCSTRING("MAX_SHININESS","\xab","\xb6","\x85","\x16")},
	{hx::fsInt,(void *) &LightStyle_obj::MAX_NUM_LIGHTS,HX_HCSTRING("MAX_NUM_LIGHTS","\x31","\x0c","\x5a","\x8e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String LightStyle_obj_sMemberFields[] = {
	HX_HCSTRING("_normalTexture","\xb5","\x11","\xbc","\x76"),
	HX_HCSTRING("_material","\x06","\x54","\x3b","\x38"),
	HX_HCSTRING("sPoint","\xdd","\xa2","\xc7","\x54"),
	HX_HCSTRING("sPoint3D","\xce","\x00","\x1c","\xd0"),
	HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e"),
	HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03"),
	HX_HCSTRING("sMatrixAlt3D","\x66","\x46","\xde","\xf3"),
	HX_HCSTRING("sMaterial","\x3a","\x44","\xc9","\x8c"),
	HX_HCSTRING("sLights","\xb0","\xf7","\xba","\xca"),
	HX_HCSTRING("setNormalTexCoords","\xbc","\xa0","\xeb","\x41"),
	HX_HCSTRING("setTexCoords","\x63","\x1d","\xc3","\xc5"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("batchVertexData","\x08","\x78","\x6c","\xf8"),
	HX_HCSTRING("canBatchWith","\xb0","\x58","\x34","\x78"),
	HX_HCSTRING("createEffect","\xad","\x9a","\xf8","\x82"),
	HX_HCSTRING("updateEffect","\x7a","\x01","\x67","\x60"),
	HX_HCSTRING("get_vertexFormat","\x44","\x6e","\x42","\xa2"),
	HX_HCSTRING("onTargetAssigned","\x3e","\xbe","\xc9","\x2c"),
	HX_HCSTRING("get_normalTexture","\xcb","\x2c","\xda","\x3e"),
	HX_HCSTRING("set_normalTexture","\xd7","\x04","\x48","\x62"),
	HX_HCSTRING("setVertexMaterial","\x6d","\x7f","\xa0","\x0b"),
	HX_HCSTRING("getVertexMaterial","\x61","\xa7","\x32","\xe8"),
	HX_HCSTRING("getAmbientRatio","\x89","\x0b","\x84","\x54"),
	HX_HCSTRING("setAmbientRatio","\x95","\x88","\x4f","\x50"),
	HX_HCSTRING("getDiffuseRatio","\xff","\x55","\x56","\x02"),
	HX_HCSTRING("setDiffuseRatio","\x0b","\xd3","\x21","\xfe"),
	HX_HCSTRING("getSpecularRatio","\xd2","\x94","\x25","\x0f"),
	HX_HCSTRING("setSpecularRatio","\x46","\x82","\x67","\x65"),
	HX_HCSTRING("getShininess","\x10","\xf4","\xeb","\xd5"),
	HX_HCSTRING("setShininess","\x84","\x17","\xe5","\xea"),
	HX_HCSTRING("get_ambientRatio","\x5c","\xa2","\x38","\x36"),
	HX_HCSTRING("set_ambientRatio","\xd0","\x8f","\x7a","\x8c"),
	HX_HCSTRING("get_diffuseRatio","\xd2","\xec","\x0a","\xe4"),
	HX_HCSTRING("set_diffuseRatio","\x46","\xda","\x4c","\x3a"),
	HX_HCSTRING("get_specularRatio","\x9f","\xf6","\x74","\xab"),
	HX_HCSTRING("set_specularRatio","\xab","\xce","\xe2","\xce"),
	HX_HCSTRING("get_shininess","\x5d","\x2b","\xf9","\x87"),
	HX_HCSTRING("set_shininess","\x69","\x0d","\xff","\xcc"),
	::String(null()) };

static void LightStyle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LightStyle_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(LightStyle_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_MARK_MEMBER_NAME(LightStyle_obj::MAX_SHININESS,"MAX_SHININESS");
	HX_MARK_MEMBER_NAME(LightStyle_obj::MAX_NUM_LIGHTS,"MAX_NUM_LIGHTS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LightStyle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LightStyle_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(LightStyle_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_VISIT_MEMBER_NAME(LightStyle_obj::MAX_SHININESS,"MAX_SHININESS");
	HX_VISIT_MEMBER_NAME(LightStyle_obj::MAX_NUM_LIGHTS,"MAX_NUM_LIGHTS");
};

#endif

hx::Class LightStyle_obj::__mClass;

static ::String LightStyle_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29"),
	HX_HCSTRING("MAX_SHININESS","\xab","\xb6","\x85","\x16"),
	HX_HCSTRING("MAX_NUM_LIGHTS","\x31","\x0c","\x5a","\x8e"),
	::String(null())
};

void LightStyle_obj::__register()
{
	hx::Object *dummy = new LightStyle_obj;
	LightStyle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.extensions.lighting.LightStyle","\x89","\x23","\xe7","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LightStyle_obj::__GetStatic;
	__mClass->mSetStaticField = &LightStyle_obj::__SetStatic;
	__mClass->mMarkFunc = LightStyle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LightStyle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LightStyle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LightStyle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LightStyle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LightStyle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LightStyle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LightStyle_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_54_boot)
HXDLIN(  54)		VERTEX_FORMAT = ::starling::extensions::lighting::LightEffect_obj::VERTEX_FORMAT;
            	}
{
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_57_boot)
HXDLIN(  57)		MAX_SHININESS = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_053977b6930841cd_60_boot)
HXDLIN(  60)		MAX_NUM_LIGHTS = (int)8;
            	}
}

} // end namespace starling
} // end namespace extensions
} // end namespace lighting
