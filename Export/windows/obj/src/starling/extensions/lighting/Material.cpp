// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_starling_extensions_lighting_Material
#include <starling/extensions/lighting/Material.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_21ad1fdd7f73367f_502_new,"starling.extensions.lighting.Material","new",0xf6dfa3a7,"starling.extensions.lighting.Material.new","starling/extensions/lighting/LightStyle.hx",502,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_21ad1fdd7f73367f_510_copyFrom,"starling.extensions.lighting.Material","copyFrom",0xea6ef718,"starling.extensions.lighting.Material.copyFrom","starling/extensions/lighting/LightStyle.hx",510,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_21ad1fdd7f73367f_518_decode,"starling.extensions.lighting.Material","decode",0x7e359047,"starling.extensions.lighting.Material.decode","starling/extensions/lighting/LightStyle.hx",518,0x868633d4)
HX_LOCAL_STACK_FRAME(_hx_pos_21ad1fdd7f73367f_526_encode,"starling.extensions.lighting.Material","encode",0x132c252f,"starling.extensions.lighting.Material.encode","starling/extensions/lighting/LightStyle.hx",526,0x868633d4)
namespace starling{
namespace extensions{
namespace lighting{

void Material_obj::__construct(hx::Null< Float >  __o_ambientRatio,hx::Null< Float >  __o_diffuseRatio,hx::Null< Float >  __o_specularRatio,hx::Null< Float >  __o_shininess){
Float ambientRatio = __o_ambientRatio.Default(((Float)0.5));
Float diffuseRatio = __o_diffuseRatio.Default(((Float)0.5));
Float specularRatio = __o_specularRatio.Default(((Float)0.1));
Float shininess = __o_shininess.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_21ad1fdd7f73367f_502_new)
HXLINE( 503)		this->ambientRatio = ambientRatio;
HXLINE( 504)		this->diffuseRatio = diffuseRatio;
HXLINE( 505)		this->specularRatio = specularRatio;
HXLINE( 506)		this->shininess = shininess;
            	}

Dynamic Material_obj::__CreateEmpty() { return new Material_obj; }

void *Material_obj::_hx_vtable = 0;

Dynamic Material_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Material_obj > _hx_result = new Material_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Material_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2677f5db;
}

void Material_obj::copyFrom( ::starling::extensions::lighting::Material material){
            	HX_STACKFRAME(&_hx_pos_21ad1fdd7f73367f_510_copyFrom)
HXLINE( 511)		this->ambientRatio = material->ambientRatio;
HXLINE( 512)		this->diffuseRatio = material->diffuseRatio;
HXLINE( 513)		this->specularRatio = material->specularRatio;
HXLINE( 514)		this->shininess = material->shininess;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Material_obj,copyFrom,(void))

void Material_obj::decode(int encoded){
            	HX_STACKFRAME(&_hx_pos_21ad1fdd7f73367f_518_decode)
HXLINE( 519)		this->ambientRatio = ((Float)((int)encoded & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 520)		this->diffuseRatio = ((Float)((int)((int)encoded >> (int)(int)8) & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 521)		this->specularRatio = ((Float)((int)((int)encoded >> (int)(int)16) & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 522)		this->shininess = (((Float)((int)((int)encoded >> (int)(int)24) & (int)(int)255) / (Float)((Float)255.0)) * (int)32);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Material_obj,decode,(void))

int Material_obj::encode(){
            	HX_STACKFRAME(&_hx_pos_21ad1fdd7f73367f_526_encode)
HXLINE( 531)		Float S = (int)32;
HXLINE( 533)		int amb = ::Std_obj::_hx_int(::starling::utils::MathUtil_obj::clamp((this->ambientRatio * (int)255),(int)0,(int)255));
HXLINE( 534)		int dif = ::Std_obj::_hx_int(::starling::utils::MathUtil_obj::clamp((this->diffuseRatio * (int)255),(int)0,(int)255));
HXLINE( 535)		int spe = ::Std_obj::_hx_int(::starling::utils::MathUtil_obj::clamp((this->specularRatio * (int)255),(int)0,(int)255));
HXLINE( 536)		int shi = ::Std_obj::_hx_int(::starling::utils::MathUtil_obj::clamp((((Float)this->shininess / (Float)S) * (int)255),(int)0,(int)255));
HXLINE( 538)		return ((int)((int)((int)amb | (int)((int)dif << (int)(int)8)) | (int)((int)spe << (int)(int)16)) | (int)((int)shi << (int)(int)24));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Material_obj,encode,return )


hx::ObjectPtr< Material_obj > Material_obj::__new(hx::Null< Float >  __o_ambientRatio,hx::Null< Float >  __o_diffuseRatio,hx::Null< Float >  __o_specularRatio,hx::Null< Float >  __o_shininess) {
	hx::ObjectPtr< Material_obj > __this = new Material_obj();
	__this->__construct(__o_ambientRatio,__o_diffuseRatio,__o_specularRatio,__o_shininess);
	return __this;
}

hx::ObjectPtr< Material_obj > Material_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_ambientRatio,hx::Null< Float >  __o_diffuseRatio,hx::Null< Float >  __o_specularRatio,hx::Null< Float >  __o_shininess) {
	Material_obj *__this = (Material_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Material_obj), false, "starling.extensions.lighting.Material"));
	*(void **)__this = Material_obj::_hx_vtable;
	__this->__construct(__o_ambientRatio,__o_diffuseRatio,__o_specularRatio,__o_shininess);
	return __this;
}

Material_obj::Material_obj()
{
}

hx::Val Material_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"decode") ) { return hx::Val( decode_dyn() ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"shininess") ) { return hx::Val( shininess ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ambientRatio") ) { return hx::Val( ambientRatio ); }
		if (HX_FIELD_EQ(inName,"diffuseRatio") ) { return hx::Val( diffuseRatio ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"specularRatio") ) { return hx::Val( specularRatio ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Material_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"shininess") ) { shininess=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ambientRatio") ) { ambientRatio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffuseRatio") ) { diffuseRatio=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"specularRatio") ) { specularRatio=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Material_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ambientRatio","\xd3","\xb5","\x99","\x31"));
	outFields->push(HX_HCSTRING("diffuseRatio","\x49","\x00","\x6c","\xdf"));
	outFields->push(HX_HCSTRING("specularRatio","\x48","\xeb","\x04","\xa5"));
	outFields->push(HX_HCSTRING("shininess","\x86","\x57","\x95","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Material_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Material_obj,ambientRatio),HX_HCSTRING("ambientRatio","\xd3","\xb5","\x99","\x31")},
	{hx::fsFloat,(int)offsetof(Material_obj,diffuseRatio),HX_HCSTRING("diffuseRatio","\x49","\x00","\x6c","\xdf")},
	{hx::fsFloat,(int)offsetof(Material_obj,specularRatio),HX_HCSTRING("specularRatio","\x48","\xeb","\x04","\xa5")},
	{hx::fsFloat,(int)offsetof(Material_obj,shininess),HX_HCSTRING("shininess","\x86","\x57","\x95","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Material_obj_sStaticStorageInfo = 0;
#endif

static ::String Material_obj_sMemberFields[] = {
	HX_HCSTRING("ambientRatio","\xd3","\xb5","\x99","\x31"),
	HX_HCSTRING("diffuseRatio","\x49","\x00","\x6c","\xdf"),
	HX_HCSTRING("specularRatio","\x48","\xeb","\x04","\xa5"),
	HX_HCSTRING("shininess","\x86","\x57","\x95","\xc6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	::String(null()) };

static void Material_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Material_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Material_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Material_obj::__mClass,"__mClass");
};

#endif

hx::Class Material_obj::__mClass;

void Material_obj::__register()
{
	hx::Object *dummy = new Material_obj;
	Material_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.extensions.lighting.Material","\x35","\x44","\xf5","\x75");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Material_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Material_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Material_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Material_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Material_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Material_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace extensions
} // end namespace lighting
